{"version":3,"file":"index.min.js","sources":["../node_modules/fast-unique-numbers/build/es2019/factories/cache.js","../node_modules/fast-unique-numbers/build/es2019/factories/generate-unique-number.js","../node_modules/fast-unique-numbers/build/es2019/module.js","../node_modules/worker-timers/build/es2019/factories/load-worker-timers.js","../node_modules/worker-timers/build/es2019/module.js","../node_modules/worker-timers-broker/build/es2019/module.js","../node_modules/worker-timers-broker/build/es2019/guards/call-notification.js","../node_modules/worker-timers-broker/build/es2019/guards/clear-response.js","../node_modules/worker-timers/build/es2019/worker/worker.js","../src/timer.js","../src/utils.js","../src/MessageChannel/methods/broadcastChannel.js","../src/MessageChannel/ObliviousSet.js","../src/MessageChannel/methods/localStorage.js","../src/MessageChannel/methods/simulate.js","../src/MessageChannel/methodChooser.js","../src/MessageChannel/MessageChannel.js","../src/MessageChannel/leaderElection.js","../src/TabManager.js","../src/IdleTimer.js","../src/useIdleTimer.js"],"sourcesContent":["export const createCache = (lastNumberWeakMap) => {\n    return (collection, nextNumber) => {\n        lastNumberWeakMap.set(collection, nextNumber);\n        return nextNumber;\n    };\n};\n//# sourceMappingURL=cache.js.map","/*\n * The value of the constant Number.MAX_SAFE_INTEGER equals (2 ** 53 - 1) but it\n * is fairly new.\n */\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER === undefined ? 9007199254740991 : Number.MAX_SAFE_INTEGER;\nconst TWO_TO_THE_POWER_OF_TWENTY_NINE = 536870912;\nconst TWO_TO_THE_POWER_OF_THIRTY = TWO_TO_THE_POWER_OF_TWENTY_NINE * 2;\nexport const createGenerateUniqueNumber = (cache, lastNumberWeakMap) => {\n    return (collection) => {\n        const lastNumber = lastNumberWeakMap.get(collection);\n        /*\n         * Let's try the cheapest algorithm first. It might fail to produce a new\n         * number, but it is so cheap that it is okay to take the risk. Just\n         * increase the last number by one or reset it to 0 if we reached the upper\n         * bound of SMIs (which stands for small integers). When the last number is\n         * unknown it is assumed that the collection contains zero based consecutive\n         * numbers.\n         */\n        let nextNumber = lastNumber === undefined ? collection.size : lastNumber < TWO_TO_THE_POWER_OF_THIRTY ? lastNumber + 1 : 0;\n        if (!collection.has(nextNumber)) {\n            return cache(collection, nextNumber);\n        }\n        /*\n         * If there are less than half of 2 ** 30 numbers stored in the collection,\n         * the chance to generate a new random number in the range from 0 to 2 ** 30\n         * is at least 50%. It's benifitial to use only SMIs because they perform\n         * much better in any environment based on V8.\n         */\n        if (collection.size < TWO_TO_THE_POWER_OF_TWENTY_NINE) {\n            while (collection.has(nextNumber)) {\n                nextNumber = Math.floor(Math.random() * TWO_TO_THE_POWER_OF_THIRTY);\n            }\n            return cache(collection, nextNumber);\n        }\n        // Quickly check if there is a theoretical chance to generate a new number.\n        if (collection.size > MAX_SAFE_INTEGER) {\n            throw new Error('Congratulations, you created a collection of unique numbers which uses all available integers!');\n        }\n        // Otherwise use the full scale of safely usable integers.\n        while (collection.has(nextNumber)) {\n            nextNumber = Math.floor(Math.random() * MAX_SAFE_INTEGER);\n        }\n        return cache(collection, nextNumber);\n    };\n};\n//# sourceMappingURL=generate-unique-number.js.map","import { createAddUniqueNumber } from './factories/add-unique-number';\nimport { createCache } from './factories/cache';\nimport { createGenerateUniqueNumber } from './factories/generate-unique-number';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './types/index';\nconst LAST_NUMBER_WEAK_MAP = new WeakMap();\nconst cache = createCache(LAST_NUMBER_WEAK_MAP);\nconst generateUniqueNumber = createGenerateUniqueNumber(cache, LAST_NUMBER_WEAK_MAP);\nconst addUniqueNumber = createAddUniqueNumber(generateUniqueNumber);\nexport { addUniqueNumber, generateUniqueNumber };\n//# sourceMappingURL=module.js.map","let workerTimers = null;\nexport const createLoadWorkerTimers = (load, worker) => {\n    return () => {\n        if (workerTimers !== null) {\n            return workerTimers;\n        }\n        const blob = new Blob([worker], { type: 'application/javascript; charset=utf-8' });\n        const url = URL.createObjectURL(blob);\n        workerTimers = load(url);\n        // Bug #1: Edge doesn't like the URL to be revoked directly.\n        workerTimers.setTimeout(() => URL.revokeObjectURL(url), 0);\n        return workerTimers;\n    };\n};\n//# sourceMappingURL=load-worker-timers.js.map","import { load } from 'worker-timers-broker';\nimport { createLoadWorkerTimers } from './factories/load-worker-timers';\nimport { worker } from './worker/worker';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './types/index';\nconst loadWorkerTimers = createLoadWorkerTimers(load, worker);\nexport const clearInterval = (timerId) => loadWorkerTimers().clearInterval(timerId);\nexport const clearTimeout = (timerId) => loadWorkerTimers().clearTimeout(timerId);\nexport const setInterval = (func, delay) => loadWorkerTimers().setInterval(func, delay);\nexport const setTimeout = (func, delay) => loadWorkerTimers().setTimeout(func, delay);\n//# sourceMappingURL=module.js.map","import { generateUniqueNumber } from 'fast-unique-numbers';\nimport { isCallNotification } from './guards/call-notification';\nimport { isClearResponse } from './guards/clear-response';\nexport const load = (url) => {\n    // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\n    const scheduledIntervalFunctions = new Map([[0, () => { }]]); // tslint:disable-line no-empty\n    const scheduledTimeoutFunctions = new Map([[0, () => { }]]); // tslint:disable-line no-empty\n    const unrespondedRequests = new Map();\n    const worker = new Worker(url);\n    worker.addEventListener('message', ({ data }) => {\n        if (isCallNotification(data)) {\n            const { params: { timerId, timerType } } = data;\n            if (timerType === 'interval') {\n                const idOrFunc = scheduledIntervalFunctions.get(timerId);\n                if (typeof idOrFunc === 'number') {\n                    const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);\n                    if (timerIdAndTimerType === undefined ||\n                        timerIdAndTimerType.timerId !== timerId ||\n                        timerIdAndTimerType.timerType !== timerType) {\n                        throw new Error('The timer is in an undefined state.');\n                    }\n                }\n                else if (typeof idOrFunc !== 'undefined') {\n                    idOrFunc();\n                }\n                else {\n                    throw new Error('The timer is in an undefined state.');\n                }\n            }\n            else if (timerType === 'timeout') {\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\n                if (typeof idOrFunc === 'number') {\n                    const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);\n                    if (timerIdAndTimerType === undefined ||\n                        timerIdAndTimerType.timerId !== timerId ||\n                        timerIdAndTimerType.timerType !== timerType) {\n                        throw new Error('The timer is in an undefined state.');\n                    }\n                }\n                else if (typeof idOrFunc !== 'undefined') {\n                    idOrFunc();\n                    // A timeout can be savely deleted because it is only called once.\n                    scheduledTimeoutFunctions.delete(timerId);\n                }\n                else {\n                    throw new Error('The timer is in an undefined state.');\n                }\n            }\n        }\n        else if (isClearResponse(data)) {\n            const { id } = data;\n            const timerIdAndTimerType = unrespondedRequests.get(id);\n            if (timerIdAndTimerType === undefined) {\n                throw new Error('The timer is in an undefined state.');\n            }\n            const { timerId, timerType } = timerIdAndTimerType;\n            unrespondedRequests.delete(id);\n            if (timerType === 'interval') {\n                scheduledIntervalFunctions.delete(timerId);\n            }\n            else {\n                scheduledTimeoutFunctions.delete(timerId);\n            }\n        }\n        else {\n            const { error: { message } } = data;\n            throw new Error(message);\n        }\n    });\n    const clearInterval = (timerId) => {\n        const id = generateUniqueNumber(unrespondedRequests);\n        unrespondedRequests.set(id, { timerId, timerType: 'interval' });\n        scheduledIntervalFunctions.set(timerId, id);\n        worker.postMessage({\n            id,\n            method: 'clear',\n            params: { timerId, timerType: 'interval' }\n        });\n    };\n    const clearTimeout = (timerId) => {\n        const id = generateUniqueNumber(unrespondedRequests);\n        unrespondedRequests.set(id, { timerId, timerType: 'timeout' });\n        scheduledTimeoutFunctions.set(timerId, id);\n        worker.postMessage({\n            id,\n            method: 'clear',\n            params: { timerId, timerType: 'timeout' }\n        });\n    };\n    const setInterval = (func, delay) => {\n        const timerId = generateUniqueNumber(scheduledIntervalFunctions);\n        scheduledIntervalFunctions.set(timerId, () => {\n            func();\n            // Doublecheck if the interval should still be rescheduled because it could have been cleared inside of func().\n            if (typeof scheduledIntervalFunctions.get(timerId) === 'function') {\n                worker.postMessage({\n                    id: null,\n                    method: 'set',\n                    params: {\n                        delay,\n                        now: performance.now(),\n                        timerId,\n                        timerType: 'interval'\n                    }\n                });\n            }\n        });\n        worker.postMessage({\n            id: null,\n            method: 'set',\n            params: {\n                delay,\n                now: performance.now(),\n                timerId,\n                timerType: 'interval'\n            }\n        });\n        return timerId;\n    };\n    const setTimeout = (func, delay) => {\n        const timerId = generateUniqueNumber(scheduledTimeoutFunctions);\n        scheduledTimeoutFunctions.set(timerId, func);\n        worker.postMessage({\n            id: null,\n            method: 'set',\n            params: {\n                delay,\n                now: performance.now(),\n                timerId,\n                timerType: 'timeout'\n            }\n        });\n        return timerId;\n    };\n    return {\n        clearInterval,\n        clearTimeout,\n        setInterval,\n        setTimeout\n    };\n};\n//# sourceMappingURL=module.js.map","export const isCallNotification = (message) => {\n    return message.method !== undefined && message.method === 'call';\n};\n//# sourceMappingURL=call-notification.js.map","export const isClearResponse = (message) => {\n    return message.error === null && typeof message.id === 'number';\n};\n//# sourceMappingURL=clear-response.js.map","// This is the minified and stringified code of the worker-timers-worker package.\nexport const worker = `(()=>{\"use strict\";const e=new Map,t=new Map,r=(e,t)=>{let r,o;const i=performance.now();r=i,o=e-Math.max(0,i-t);return{expected:r+o,remainingDelay:o}},o=(e,t,r,i)=>{const s=performance.now();s>r?postMessage({id:null,method:\"call\",params:{timerId:t,timerType:i}}):e.set(t,setTimeout(o,r-s,e,t,r,i))};addEventListener(\"message\",(i=>{let{data:s}=i;try{if(\"clear\"===s.method){const{id:r,params:{timerId:o,timerType:i}}=s;if(\"interval\"===i)(t=>{const r=e.get(t);if(void 0===r)throw new Error('There is no interval scheduled with the given id \"'.concat(t,'\".'));clearTimeout(r),e.delete(t)})(o),postMessage({error:null,id:r});else{if(\"timeout\"!==i)throw new Error('The given type \"'.concat(i,'\" is not supported'));(e=>{const r=t.get(e);if(void 0===r)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(r),t.delete(e)})(o),postMessage({error:null,id:r})}}else{if(\"set\"!==s.method)throw new Error('The given method \"'.concat(s.method,'\" is not supported'));{const{params:{delay:i,now:n,timerId:a,timerType:d}}=s;if(\"interval\"===d)((t,i,s)=>{const{expected:n,remainingDelay:a}=r(t,s);e.set(i,setTimeout(o,a,e,i,n,\"interval\"))})(i,a,n);else{if(\"timeout\"!==d)throw new Error('The given type \"'.concat(d,'\" is not supported'));((e,i,s)=>{const{expected:n,remainingDelay:a}=r(e,s);t.set(i,setTimeout(o,a,t,i,n,\"timeout\"))})(i,a,n)}}}}catch(e){postMessage({error:{message:e.message},id:s.id,result:null})}}))})();`; // tslint:disable-line:max-line-length\n//# sourceMappingURL=worker.js.map","import * as workerTimers from 'worker-timers'\n\nconst isWebWorkerSupported = !!window.Worker && typeof Worker !== 'undefined'\n\nconst timer = {}\n\ntimer.clearInterval = (intervalId) => {\n  if (isWebWorkerSupported) {\n    workerTimers.clearInterval(intervalId)\n  } else {\n    clearInterval(intervalId)\n  }\n}\n\ntimer.clearTimeout = (timeoutId) => {\n  if (isWebWorkerSupported) {\n    workerTimers.clearTimeout(timeoutId)\n  } else {\n    clearTimeout(timeoutId)\n  }\n}\n\ntimer.setInterval = (callback, delay) => {\n  if (isWebWorkerSupported) {\n    workerTimers.setInterval(callback, delay)\n  } else {\n    setInterval(callback, delay)\n  }\n}\n\ntimer.setTimeout = (callback, delay) => {\n  if (isWebWorkerSupported) {\n    workerTimers.setTimeout(callback, delay)\n  } else {\n    setTimeout(callback, delay)\n  }\n}\n\nexport default timer\n","import timer from './timer'\n\n/**\n * Determine if we are in a browser\n * or a server environment\n * @type {Boolean}\n * @private\n */\nexport const IS_BROWSER =\n  (typeof window === 'undefined' ? 'undefined' : typeof window) === 'object'\n\n/**\n * Default element to listen for events on\n * @type {Object}\n * @private\n */\nexport const DEFAULT_ELEMENT = IS_BROWSER ? document : {}\n\n/**\n * The default events to determine activity\n * @type {Array}\n * @private\n */\nexport const DEFAULT_EVENTS = [\n  'mousemove',\n  'keydown',\n  'wheel',\n  'DOMMouseScroll',\n  'mousewheel',\n  'mousedown',\n  'touchstart',\n  'touchmove',\n  'MSPointerDown',\n  'MSPointerMove',\n  'visibilitychange'\n]\n\n/**\n * Creates a debounced function that delays invoking func until\n * after delay milliseconds has elapsed since the last time the\n * debounced function was invoked.\n * @name debounced\n * @param  {Function} fn   Function to debounce\n * @param  {Number} delay  How long to wait\n * @return {Function}      Executed Function\n * @private\n **/\nexport function debounced (fn, delay) {\n  let timerId\n  function result (...args) {\n    if (timerId) {\n      timer.clearTimeout(timerId)\n    }\n    timerId = timer.setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n\n  result.cancel = function () {\n    timer.clearTimeout(timerId)\n  }\n\n  return result\n}\n\n/**\n * Creates a throttled function that only invokes func at most\n * once per every wait milliseconds.\n * @name throttled\n * @param  {Function} fn   Function to debounce\n * @param  {Number} delay  How long to wait\n * @return {Function}      Executed Function\n * @private\n **/\nexport function throttled (fn, delay) {\n  let lastCall = 0\n  return function (...args) {\n    const now = new Date().getTime()\n    if (now - lastCall < delay) {\n      return\n    }\n    lastCall = now\n    return fn(...args)\n  }\n}\n\nlet lastMs = 0\nlet additional = 0\n\n/**\n * Returns current time in microseconds.\n *\n * @returns {Number} current time in microseconds\n * @private\n */\nexport function microSeconds () {\n  const ms = new Date().getTime()\n  if (ms === lastMs) {\n    additional++\n    return ms * 1000 + additional\n  } else {\n    lastMs = ms\n    additional = 0\n    return ms * 1000\n  }\n}\n\n/**\n * Generate and return a random token.\n *\n * @returns {String} Random token.\n * @private\n */\nexport function randomToken () {\n  return Math.random().toString(36).substring(2)\n}\n\n/**\n * Checks if a js object is a promise.\n *\n * @param {*} obj  Any javascript object.\n * @returns {Boolean} Wether or not this object is a promise.\n */\nexport function isPromise (obj) {\n  if (obj && typeof obj.then === 'function') {\n    /* istanbul ignore next */\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * Sleeps for x amount of milliseconds.\n *\n * @param {Number} time   Amount of time in milliseconds.\n * @returns {Promise}\n * @private\n */\nexport function sleep (time = 0) {\n  return new Promise(resolve => timer.setTimeout(resolve, time))\n}\n\n/**\n * Get the current timestamp.\n *\n * @returns {Number}\n * @private\n */\nexport function now () {\n  return new Date().getTime()\n}\n\n/**\n * Waits until the given function returns true\n * @param  {function}  fn\n * @return {Promise}\n */\nexport function waitUntil (fn, timeout = 0, interval = 20) {\n  let timedOut = false\n  let ok = false\n\n  /* istanbul ignore next */\n  if (timeout !== 0) {\n    sleep(timeout).then(() => {\n      timedOut = true\n    })\n  }\n\n  return new Promise((resolve, reject) => {\n    const runLoop = () => {\n      if (ok) {\n        resolve()\n        return\n      }\n      /* istanbul ignore next */\n      if (timedOut) {\n        reject(new Error(`❌ waitUntil reached timeout of ${timeout}ms`))\n        return\n      }\n      sleep(interval).then(() => {\n        ok = fn()\n        runLoop()\n      })\n    }\n    runLoop()\n  })\n}\n","/* eslint-env browser */\nimport { microSeconds } from '../../utils'\n\nexport const type = 'broadcastChannel'\n\nexport function create (channelName) {\n  const state = {\n    messagesCallback: null,\n    bc: new BroadcastChannel(channelName)\n  }\n\n  state.bc.onmessage = msg => {\n    if (state.messagesCallback) {\n      state.messagesCallback(msg.data)\n    }\n  }\n\n  return state\n}\n\nexport function close (channelState) {\n  channelState.bc.close()\n}\n\nexport function postMessage (channelState, messageJson) {\n  try {\n    channelState.bc.postMessage(messageJson, false)\n    return Promise.resolve()\n  } catch (err) {\n    /* istanbul ignore next */\n    return Promise.reject(err)\n  }\n}\n\nexport function onMessage (channelState, fn) {\n  channelState.messagesCallback = fn\n}\n\nexport function canBeUsed () {\n  if (typeof BroadcastChannel === 'function') {\n    return true\n  } else {\n    /* istanbul ignore next */\n    return false\n  }\n}\n\nexport function averageResponseTime () {\n  return 150\n}\n\nexport default {\n  create,\n  close,\n  onMessage,\n  postMessage,\n  canBeUsed,\n  type,\n  averageResponseTime,\n  microSeconds\n}\n","import { now } from '../utils'\n\nexport default class ObliviousSet {\n  constructor (ttl = 1000 * 60) {\n    this.ttl = ttl\n    this.set = new Set()\n    this.timeMap = new Map()\n  }\n\n  has (value) {\n    return this.set.has(value)\n  }\n\n  add (value) {\n    this.timeMap.set(value, now())\n    this.set.add(value)\n    this._removeTooOldValues()\n  }\n\n  clear () {\n    this.set.clear()\n    this.timeMap.clear()\n  }\n\n  _removeTooOldValues () {\n    const olderThen = now() - this.ttl\n    const iterator = this.set[Symbol.iterator]()\n\n    while (true) {\n      const value = iterator.next().value\n      if (!value) return // no more elements\n      const time = this.timeMap.get(value)\n      if (time < olderThen) {\n        this.timeMap.delete(value)\n        this.set.delete(value)\n      } else {\n        // We reached a value that is not old enough\n        return\n      }\n    }\n  }\n}\n","import ObliviousSet from '../ObliviousSet'\n\nimport {\n  randomToken,\n  microSeconds\n} from '../../utils'\n\nexport const type = 'localStorage'\n\n/**\n * Returns local storage instance\n */\nexport function getLocalStorage () {\n  let localStorage\n  if (typeof window === 'undefined') return null\n  try {\n    localStorage = window.localStorage\n    localStorage = window['ie8-eventlistener/storage'] || window.localStorage\n  } catch (e) {\n    // New versions of Firefox throw a Security exception\n    // if cookies are disabled. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1028153\n  }\n  return localStorage\n}\n\nexport function storageKey (channelName) {\n  return channelName\n}\n\n/**\n* writes the new message to the storage\n* and fires the storage-event so other readers can find it\n*/\nexport function postMessage (channelState, messageJson) {\n  return new Promise(resolve => {\n    const key = storageKey(channelState.channelName)\n    const writeObj = {\n      token: randomToken(),\n      time: new Date().getTime(),\n      data: messageJson,\n      uuid: channelState.uuid\n    }\n    const value = JSON.stringify(writeObj)\n    getLocalStorage().setItem(key, value)\n\n    /**\n       * StorageEvent does not fire the 'storage' event\n       * in the window that changes the state of the local storage.\n       * So we fire it manually\n       */\n    const ev = document.createEvent('Event')\n    ev.initEvent('storage', true, true)\n    ev.key = key\n    ev.newValue = value\n    window.dispatchEvent(ev)\n\n    resolve()\n  })\n}\n\nexport function addStorageEventListener (channelName, fn) {\n  const key = storageKey(channelName)\n  const listener = ev => {\n    if (ev.key === key) {\n      fn(JSON.parse(ev.newValue))\n    }\n  }\n  window.addEventListener('storage', listener)\n  return listener\n}\nexport function removeStorageEventListener (listener) {\n  window.removeEventListener('storage', listener)\n}\n\nexport function create (channelName, options = {}) {\n  if (!canBeUsed()) {\n    /* istanbul ignore next */\n    throw new Error('❌ localStorage cannot be used.')\n  }\n\n  const uuid = randomToken()\n\n  /**\n     * eMIs\n     * contains all messages that have been emitted before\n     * @type {ObliviousSet}\n     */\n  const eMIs = new ObliviousSet(options.removeTimeout)\n\n  const state = {\n    channelName,\n    uuid,\n    eMIs // emittedMessagesIds\n  }\n\n  state.listener = addStorageEventListener(\n    channelName,\n    (msgObj) => {\n      if (!state.messagesCallback) return // no listener\n      if (msgObj.uuid === uuid) return // own message\n      if (!msgObj.token || eMIs.has(msgObj.token)) return // already emitted\n      if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return // too old\n\n      eMIs.add(msgObj.token)\n      state.messagesCallback(msgObj.data)\n    }\n  )\n\n  return state\n}\n\nexport function close (channelState) {\n  removeStorageEventListener(channelState.listener)\n}\n\nexport function onMessage (channelState, fn, time) {\n  channelState.messagesCallbackTime = time\n  channelState.messagesCallback = fn\n}\n\nexport function canBeUsed () {\n  const ls = getLocalStorage()\n\n  if (!ls) return false\n\n  try {\n    const key = '__check'\n    ls.setItem(key, 'works')\n    ls.removeItem(key)\n  } catch (e) {\n    // Safari 10 in private mode will not allow write access to local\n    // storage and fail with a QuotaExceededError. See\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API#Private_Browsing_Incognito_modes\n\n    /* istanbul ignore next */\n    return false\n  }\n\n  return true\n}\n\n/* istanbul ignore next */\nexport function averageResponseTime () {\n  const defaultTime = 120\n  const userAgent = navigator.userAgent.toLowerCase()\n  if (userAgent.includes('safari') && !userAgent.includes('chrome')) {\n    // safari is much slower so this time is higher\n    return defaultTime * 2\n  }\n  return defaultTime\n}\n\nexport default {\n  create,\n  close,\n  onMessage,\n  postMessage,\n  canBeUsed,\n  type,\n  averageResponseTime,\n  microSeconds\n}\n","import timer from '../../timer'\nimport { microSeconds } from '../../utils'\n\nexport const type = 'simulate'\n\nconst SIMULATE_CHANNELS = new Set()\n\nexport function create (channelName) {\n  const state = {\n    name: channelName,\n    messagesCallback: null\n  }\n  SIMULATE_CHANNELS.add(state)\n\n  return state\n}\n\nexport function close (channelState) {\n  SIMULATE_CHANNELS.delete(channelState)\n}\n\nexport function postMessage (channelState, messageJson) {\n  return new Promise(resolve => timer.setTimeout(() => {\n    const channelArray = Array.from(SIMULATE_CHANNELS)\n    channelArray\n      .filter(channel => channel.name === channelState.name)\n      .filter(channel => channel !== channelState)\n      .filter(channel => !!channel.messagesCallback)\n      .forEach(channel => channel.messagesCallback(messageJson))\n    resolve()\n  }, 5))\n}\n\nexport function onMessage (channelState, fn) {\n  channelState.messagesCallback = fn\n}\n\n/* istanbul ignore next */\nexport function canBeUsed () {\n  return true\n}\n\n/* istanbul ignore next */\nexport function averageResponseTime () {\n  return 5\n}\n\nexport default {\n  create,\n  close,\n  onMessage,\n  postMessage,\n  canBeUsed,\n  type,\n  averageResponseTime,\n  microSeconds\n}\n","import BroadcastChannelMethod from './methods/broadcastChannel'\nimport LocalStorageMethod from './methods/localStorage'\nimport SimulateMethod from './methods/simulate'\n\n// Order is important\nconst METHODS = [\n  BroadcastChannelMethod,\n  LocalStorageMethod\n]\n\nexport function chooseMethod (options = {}) {\n  if (options.type) {\n    // For testing\n    if (options.type === 'simulate') {\n      return SimulateMethod\n    }\n\n    // Chosen type\n    const method = METHODS.find(m => m.type === options.type)\n    if (!method) throw new Error(`❌ Method ${options.type} is not supported.`)\n    else return method\n  }\n\n  const useMethod = METHODS.find(method => method.canBeUsed())\n\n  /* istanbul ignore next */\n  if (!useMethod) {\n    throw new Error(`❌ No method found ${JSON.stringify(METHODS.map(m => m.type))}`)\n  }\n  return useMethod\n}\n","import { chooseMethod } from './methodChooser'\nimport { isPromise } from '../utils'\n\nexport class MessageChannel {\n  constructor (name, options = {}) {\n    this.name = name\n    this.options = options\n    this.method = chooseMethod(this.options)\n    this.closed = false\n\n    // isListening\n    this._isListening = false\n\n    /**\n     * _onMessageListener\n     * setting onmessage twice,\n     * will overwrite the first listener\n     */\n    this._onMessageListener = null\n\n    /**\n     * _addEventListeners\n     */\n    this._addEventListeners = {\n      message: [],\n      internal: []\n    }\n\n    /**\n     * Un send message promises\n     * where the sending is still in progress\n     * @type {Set<Promise>}\n     */\n    this._unSendMessagePromises = new Set()\n\n    /**\n     * _beforeClose\n     * array of promises that will be awaited\n     * before the channel is closed\n     */\n    this._beforeClose = []\n\n    /**\n     * _preparePromise\n     */\n    this._preparePromises = null\n    _prepareChannel(this)\n  }\n\n  postMessage (msg) {\n    if (this.closed) {\n      throw new Error(\n        '❌ Cannot post message after channel has closed'\n      )\n    }\n    return _post(this, 'message', msg)\n  }\n\n  postInternal (msg) {\n    return _post(this, 'internal', msg)\n  }\n\n  set onmessage (fn) {\n    const time = this.method.microSeconds()\n    const listenObj = {\n      time,\n      fn\n    }\n    _removeListenerObject(this, 'message', this._onMessageListener)\n    if (fn && typeof fn === 'function') {\n      this._onMessageListener = listenObj\n      _addListenerObject(this, 'message', listenObj)\n    } else {\n      /* istanbul ignore next */\n      this._onMessageListener = null\n    }\n  }\n\n  /* istanbul ignore next */\n  get onmessage () {\n    return this._onMessageListener\n  }\n\n  addEventListener (type, fn) {\n    const time = this.method.microSeconds()\n    const listenObj = {\n      time,\n      fn\n    }\n    _addListenerObject(this, type, listenObj)\n  }\n\n  removeEventListener (type, fn) {\n    const obj = this._addEventListeners[type].find(obj => obj.fn === fn)\n    _removeListenerObject(this, type, obj)\n  }\n\n  close () {\n    if (this.closed) {\n      return\n    }\n    this.closed = true\n    const awaitPrepare = this._preparePromises ? this._preparePromises : Promise.resolve()\n\n    this._onMessageListener = null\n    this._addEventListeners.message = []\n\n    return awaitPrepare\n      // Wait until all current sending are processed\n      .then(() => Promise.all(Array.from(this._unSendMessagePromises)))\n      // Run before-close hooks\n      .then(() => Promise.all(this._beforeClose.map(fn => fn())))\n      // Close the channel\n      .then(() => this.method.close(this._state))\n  }\n\n  get type () {\n    return this.method.type\n  }\n\n  isClosed () {\n    return this.closed\n  }\n}\n\nfunction _post (messageChannel, type, msg) {\n  const time = messageChannel.method.microSeconds()\n  const msgObj = {\n    time,\n    type,\n    data: msg\n  }\n\n  const awaitPrepare = messageChannel._preparePromises ? messageChannel._preparePromises : Promise.resolve()\n  return awaitPrepare.then(() => {\n    const sendPromise = messageChannel.method.postMessage(\n      messageChannel._state,\n      msgObj\n    )\n\n    // add/remove to un-send messages list\n    messageChannel._unSendMessagePromises.add(sendPromise)\n    sendPromise\n      .catch()\n      .then(() => messageChannel._unSendMessagePromises.delete(sendPromise))\n\n    return sendPromise\n  })\n}\n\nfunction _prepareChannel (channel) {\n  const maybePromise = channel.method.create(channel.name, channel.options)\n  /* istanbul ignore next */\n  if (isPromise(maybePromise)) {\n    channel._preparePromises = maybePromise\n    maybePromise.then(s => {\n      channel._state = s\n    })\n  } else {\n    channel._state = maybePromise\n  }\n}\n\nfunction _hasMessageListeners (channel) {\n  if (channel._addEventListeners.message.length > 0) return true\n  if (channel._addEventListeners.internal.length > 0) return true\n  return false\n}\n\nfunction _addListenerObject (channel, type, obj) {\n  channel._addEventListeners[type].push(obj)\n  _startListening(channel)\n}\n\nfunction _removeListenerObject (channel, type, obj) {\n  channel._addEventListeners[type] = channel._addEventListeners[type].filter(o => o !== obj)\n  _stopListening(channel)\n}\n\nfunction _startListening (channel) {\n  if (!channel._isListening && _hasMessageListeners(channel)) {\n    // someone is listening, start subscribing\n\n    const listenerFn = msgObj => {\n      channel._addEventListeners[msgObj.type].forEach(obj => {\n        if (msgObj.time >= obj.time) {\n          obj.fn(msgObj.data)\n        }\n      })\n    }\n\n    const time = channel.method.microSeconds()\n    if (channel._preparePromises) {\n      /* istanbul ignore next */\n      channel._preparePromises.then(() => {\n        channel._isListening = true\n        channel.method.onMessage(\n          channel._state,\n          listenerFn,\n          time\n        )\n      })\n    } else {\n      channel._isListening = true\n      channel.method.onMessage(\n        channel._state,\n        listenerFn,\n        time\n      )\n    }\n  }\n}\n\nfunction _stopListening (channel) {\n  if (channel._isListening && !_hasMessageListeners(channel)) {\n    // no one is listening, stop subscribing\n    channel._isListening = false\n    const time = channel.method.microSeconds()\n    channel.method.onMessage(\n      channel._state,\n      null,\n      time\n    )\n  }\n}\n","import timer from '../timer'\nimport { IS_BROWSER, sleep, randomToken } from '../utils'\n\nclass LeaderElection {\n  constructor (channel, options) {\n    this._channel = channel\n    this._options = options\n\n    this.isLeader = false\n    this.isDead = false\n    this.token = randomToken()\n\n    this._isApplying = false\n    this._reApply = false\n\n    // things to clean up\n    this._unloadFns = []\n    this._listeners = []\n    this._intervals = []\n    this._duplicateListeners = () => { }\n    this._duplicateCalled = false\n    this._onBeforeDie = async () => {}\n\n    const unloadFn = async () => this.die()\n\n    if (IS_BROWSER) {\n      window.addEventListener('beforeUnload', unloadFn)\n      window.addEventListener('unload', unloadFn)\n\n      this._unloadFns.push(['beforeUnload', unloadFn])\n      this._unloadFns.push(['unload', unloadFn])\n    }\n  }\n\n  applyOnce () {\n    if (this.isLeader) return Promise.resolve(false)\n    if (this.isDead) return Promise.resolve(false)\n\n    // do nothing if already running\n    if (this._isApplying) {\n      this._reApply = true\n      return Promise.resolve(false)\n    }\n    this._isApplying = true\n\n    let stopCriteria = false\n    const received = []\n\n    const handleMessage = (msg) => {\n      if (msg.context === 'leader' && msg.token !== this.token) {\n        received.push(msg)\n\n        if (msg.action === 'apply') {\n          // Other is applying\n          if (msg.token > this.token) {\n            // Other has higher token, stop applying\n            stopCriteria = true\n          }\n        }\n\n        if (msg.action === 'tell') {\n          // Other is already leader\n          stopCriteria = true\n        }\n      }\n    }\n    this._channel.addEventListener('internal', handleMessage)\n\n    return _sendMessage(this, 'apply') // send out that this one is applying\n      .then(() => sleep(this._options.responseTime)) // let others time to respond\n      .then(() => {\n        if (stopCriteria) return Promise.reject(new Error())\n        else return _sendMessage(this, 'apply')\n      })\n      .then(() => sleep(this._options.responseTime)) // let others time to respond\n      .then(() => {\n        if (stopCriteria) return Promise.reject(new Error())\n        else return _sendMessage(this)\n      })\n      .then(() => beLeader(this)) // no one disagreed -> this one is now leader\n      .then(() => true)\n      .catch(() => false) // apply not successful\n      .then(success => {\n        this._channel.removeEventListener('internal', handleMessage)\n        this._isApplying = false\n        if (!success && this._reApply) {\n          this._reApply = false\n          return this.applyOnce()\n        } else return success\n      })\n  }\n\n  awaitLeadership () {\n    if (\n      !this._awaitLeadershipPromise\n    ) {\n      this._awaitLeadershipPromise = _awaitLeadershipOnce(this)\n    }\n    return this._awaitLeadershipPromise\n  }\n\n  set onDuplicate (fn) {\n    this._duplicateListeners = fn\n  }\n\n  /* istanbul ignore next */\n  get onDuplicate () {\n    return this._duplicateListeners\n  }\n\n  set onBeforeDie (fn) {\n    this._onBeforeDie = fn\n  }\n\n  /* istanbul ignore next */\n  get onBeforeDie () {\n    return this._onBeforeDie\n  }\n\n  async die () {\n    if (this.isDead) return\n    this.isDead = true\n\n    await this.onBeforeDie()\n    this._listeners.forEach(listener => this._channel.removeEventListener('internal', listener))\n    this._intervals.forEach(interval => timer.clearInterval(interval))\n    this._unloadFns.forEach(uFn => {\n      if (IS_BROWSER) {\n        window.removeEventListener(uFn[0], uFn[1])\n      }\n    })\n    return _sendMessage(this, 'death')\n  }\n}\n\nfunction _awaitLeadershipOnce (leaderElector) {\n  if (leaderElector.isLeader) return Promise.resolve()\n\n  return new Promise(resolve => {\n    let resolved = false\n\n    function finish () {\n      /* istanbul ignore next */\n      if (resolved) {\n        return\n      }\n      resolved = true\n      timer.clearInterval(interval)\n      leaderElector._channel.removeEventListener('internal', whenDeathListener)\n      resolve(true)\n    }\n\n    // try once now\n    leaderElector.applyOnce().then(() => {\n      if (leaderElector.isLeader) {\n        finish()\n      }\n    })\n\n    // try on fallbackInterval\n    const interval = timer.setInterval(() => {\n      /* istanbul ignore next */\n      leaderElector.applyOnce().then(() => {\n        if (leaderElector.isLeader) {\n          finish()\n        }\n      })\n    }, leaderElector._options.fallbackInterval)\n    leaderElector._intervals.push(interval)\n\n    // try when other leader dies\n    const whenDeathListener = msg => {\n      if (msg.context === 'leader' && msg.action === 'death') {\n        leaderElector.applyOnce().then(() => {\n          if (leaderElector.isLeader) finish()\n        })\n      }\n    }\n    leaderElector._channel.addEventListener('internal', whenDeathListener)\n    leaderElector._listeners.push(whenDeathListener)\n  })\n}\n\n/**\n * Sends and internal message over the broadcast-channel\n */\nfunction _sendMessage (leaderElector, action) {\n  const msgJson = {\n    context: 'leader',\n    action,\n    token: leaderElector.token\n  }\n  return leaderElector._channel.postInternal(msgJson)\n}\n\nexport function beLeader (leaderElector) {\n  leaderElector.isLeader = true\n\n  const isLeaderListener = msg => {\n    if (msg.context === 'leader' && msg.action === 'apply') {\n      _sendMessage(leaderElector, 'tell')\n    }\n\n    if (msg.context === 'leader' && msg.action === 'tell' && !leaderElector._duplicateCalled) {\n      /**\n       * Another instance is also leader!\n       * This can happen on rare events\n       * like when the CPU is at 100% for long time\n       * or the tabs are open very long and the browser throttles them.\n       */\n      leaderElector._duplicateCalled = true\n      leaderElector._duplicateListeners() // message the lib user so the app can handle the problem\n      _sendMessage(leaderElector, 'tell') // ensure other leader also knows the problem\n    }\n  }\n  leaderElector._channel.addEventListener('internal', isLeaderListener)\n  leaderElector._listeners.push(isLeaderListener)\n  return _sendMessage(leaderElector, 'tell')\n}\n\nexport function createLeaderElection (channel, options) {\n  if (channel._leaderElector) {\n    throw new Error('❌ MessageChannel already has a leader-elector')\n  }\n\n  const elector = new LeaderElection(channel, options)\n  channel._beforeClose.push(async () => elector.die())\n\n  channel._leaderElector = elector\n  return elector\n}\n","import { MessageChannel, createLeaderElection } from './MessageChannel'\nexport const TabManager = ({\n  type,\n  channelName,\n  fallbackInterval,\n  responseTime,\n  emitOnAllTabs,\n  callbacks,\n  start,\n  reset,\n  pause,\n  resume\n}) => {\n  const channel = new MessageChannel(channelName, { type })\n  const elector = createLeaderElection(channel, { fallbackInterval, responseTime })\n  const registry = {}\n\n  // Register self\n  registry[elector.token] = false\n\n  let leader = false\n  let allIdle = true\n\n  const isLeader = () => leader\n\n  elector.awaitLeadership().then(() => {\n    leader = true\n  })\n\n  channel.addEventListener('message', ([type, id]) => {\n    switch (type) {\n      case 'register':\n        registry[id] = false\n        break\n      case 'deregister':\n        delete registry[id]\n        break\n      case 'idle':\n        idle(id)\n        break\n      case 'active':\n        active(id)\n        break\n      case 'emitIdle':\n        callbacks.onIdle()\n        break\n      case 'emitActive':\n        callbacks.onActive()\n        break\n      case 'start':\n        start(true)\n        break\n      case 'reset':\n        reset(true)\n        break\n      case 'pause':\n        pause(true)\n        break\n      case 'resume':\n        resume(true)\n        break\n      default:\n        // no op\n    }\n  })\n\n  const setAllIdle = bool => {\n    allIdle = bool\n  }\n\n  const isAllIdle = () => allIdle\n\n  const idle = (id = elector.token) => {\n    registry[id] = true\n    const isIdle = Object.values(registry).every(v => v)\n    if (!allIdle && isIdle) {\n      allIdle = true\n      if (isLeader()) {\n        callbacks.onIdle()\n        if (emitOnAllTabs) send('emitIdle')\n      } else {\n        send('idle')\n      }\n    }\n  }\n\n  const active = (id = elector.token) => {\n    registry[id] = false\n    const isActive = Object.values(registry).some(v => !v)\n    if (allIdle && isActive) {\n      allIdle = false\n      if (isLeader()) {\n        callbacks.onActive()\n        if (emitOnAllTabs) send('emitActive')\n      } else {\n        send('active')\n      }\n    }\n  }\n\n  /* istanbul ignore next */\n  elector.onDuplicate = async () => await elector.die()\n  elector.onBeforeDie = async () => await send('deregister')\n\n  const send = async message => channel.postMessage([message, elector.token])\n\n  const close = async () => {\n    await elector.die()\n    await channel.close()\n  }\n\n  // Register self with remote tabs\n  send('register')\n\n  return { close, send, isLeader, idle, active, isAllIdle, setAllIdle }\n}\n","/**\n *  ___    _ _     _____ _\n * |_ _|__| | | __|_   _(_)_ __ ___   ___ _ __\n *  | |/ _` | |/ _ \\| | | | '_ ` _ \\ / _ \\ '__|\n *  | | (_| | |  __/| | | | | | | | |  __/ |\n * |___\\__,_|_|\\___||_| |_|_| |_| |_|\\___|_|\n *\n * @name IdleTimer\n * @author Randy Lebeau\n * @private\n */\n\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport timer from './timer'\nimport { TabManager } from './TabManager'\nimport { IS_BROWSER, DEFAULT_ELEMENT, DEFAULT_EVENTS, debounced, throttled } from './utils'\n\n/**\n * Detects when your user is idle\n * @class IdleTimer\n * @private\n */\nclass IdleTimer extends Component {\n  /**\n   * Creates an instance of IdleTimer\n   * bind all of our internal events here\n   * for best performance\n   * @param {Object} props\n   * @return {IdleTimer}\n   * @private\n   */\n  constructor (props) {\n    super(props)\n\n    /**\n     * Sets initial component state\n     * @type {Object}\n     * @private\n     */\n    this.state = {\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      lastIdle: null,\n      idleTime: 0,\n      remaining: null,\n      pageX: null,\n      pageY: null\n    }\n\n    /**\n     * The timer instance\n     * @type {Timeout}\n     * @private\n     */\n    this.tId = null\n\n    /**\n     * Wether or not events are bound\n     * @type {boolean}\n     * @private\n     */\n    this.eventsBound = false\n\n    this.callbackRefs = {}\n\n    // Debounce and throttle can't both be set\n    if (props.debounce > 0 && props.throttle > 0) {\n      throw new Error('onAction can either be throttled or debounced (not both)')\n    }\n\n    // Create debounced action if applicable\n    if (props.debounce > 0) {\n      this._onAction = debounced(props.onAction, props.debounce)\n\n    // Create throttled action if applicable\n    } else if (props.throttle > 0) {\n      this._onAction = throttled(props.onAction, props.throttle)\n\n    // Set custom onAction\n    } else {\n      this._onAction = props.onAction\n    }\n\n    // Create a throttle event handler if applicable\n    if (props.eventsThrottle > 0) {\n      this.handleEvent = throttled(this._handleEvent.bind(this), props.eventsThrottle)\n    } else {\n      this.handleEvent = this._handleEvent.bind(this)\n    }\n\n    // If startOnMount is set, idle state defaults to true\n    if (!props.startOnMount || props.startManually) {\n      this.state.idle = true\n    }\n\n    // Bind all events to component scope, built for speed 🚀\n    this._toggleIdleState = this._toggleIdleState.bind(this)\n    this.start = this.start.bind(this)\n    this.reset = this.reset.bind(this)\n    this.pause = this.pause.bind(this)\n    this.resume = this.resume.bind(this)\n    this.isIdle = this.isIdle.bind(this)\n    this.getRemainingTime = this.getRemainingTime.bind(this)\n    this.getElapsedTime = this.getElapsedTime.bind(this)\n    this.getLastActiveTime = this.getLastActiveTime.bind(this)\n    this.getLastIdleTime = this.getLastIdleTime.bind(this)\n    this.getTotalIdleTime = this.getTotalIdleTime.bind(this)\n    this.getTotalActiveTime = this.getTotalActiveTime.bind(this)\n  }\n\n  /**\n   * Runs once the component has mounted\n   * here we handle automatically starting\n   * the idletimer\n   * @private\n   */\n  componentDidMount () {\n    const { startOnMount, startManually } = this.props\n\n    // Set up cross tab\n    this._setupTabManager()\n\n    if (startManually) return\n    if (startOnMount) {\n      this.start()\n    } else {\n      this._bindEvents()\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    // Update debounce function\n    if ((prevProps.debounce !== this.props.debounce) && this.props.debounce > 0) {\n      if (this._onAction.cancel) this._onAction.cancel()\n      this._onAction = debounced(this.props.onAction, this.props.debounce)\n    } else\n    // Update throttle function\n    if ((prevProps.throttle !== this.props.throttle) && this.props.throttle > 0) {\n      if (this._onAction.cancel) this._onAction.cancel()\n      this._onAction = throttled(this.props.onAction, this.props.throttle)\n    } else\n    // Remove throttle or debounce\n    if (\n      (prevProps.throttle && this.props.throttle === 0) ||\n      (prevProps.debounce && this.props.debounce === 0)\n    ) {\n      if (this._onAction.cancel) this._onAction.cancel()\n      this._onAction = this.props.onAction\n    }\n\n    // Update event throttle function\n    if (prevProps.eventsThrottle !== this.props.eventsThrottle) {\n      this._unbindEvents()\n      this.handleEvent = throttled(this._handleEvent.bind(this), this.props.eventsThrottle)\n      this._bindEvents()\n    }\n    // Update timeout value\n    if (prevProps.timeout !== this.props.timeout) {\n      if (this.state.idle) this.reset()\n    }\n\n    // Update callback refs\n    if (prevProps.onActive !== this.props.onActive) this.callbackRefs.onActive = this.props.onActive\n    if (prevProps.onIdle !== this.props.onIdle) this.callbackRefs.onIdle = this.props.onIdle\n  }\n\n  /**\n   * Called before the component un-mounts\n   * here we clear the timer and remove\n   * all the event listeners\n   * @private\n   */\n  componentWillUnmount () {\n    // Clear timeout to prevent delayed state changes\n    timer.clearTimeout(this.tId)\n    this._unbindEvents(true)\n    // Cancel any debounced onAction handlers\n    if (this._onAction.cancel) this._onAction.cancel()\n    /* istanbul ignore next */\n    if (this.manager) {\n      this.manager.close().catch(console.error)\n    }\n  }\n\n  /**\n   * Render children if IdleTimer is used as a wrapper\n   * @return {Component} children\n   * @private\n   */\n  render () {\n    const { children } = this.props\n    return children || null\n  }\n\n  /**\n   * Setup the Tab Manager.\n   * @private\n   */\n  _setupTabManager () {\n    const { crossTab, onIdle, onActive } = this.props\n    this.callbackRefs = { onIdle, onActive }\n\n    /* istanbul ignore next */\n    if (crossTab) {\n      const {\n        type,\n        channelName,\n        fallbackInterval,\n        responseTime,\n        emitOnAllTabs\n      } = Object.assign({\n        channelName: 'idle-timer',\n        fallbackInterval: 2000,\n        responseTime: 100,\n        removeTimeout: 1000 * 60,\n        emitOnAllTabs: false\n      }, crossTab === true ? {} : crossTab)\n\n      this.manager = TabManager({\n        type,\n        channelName,\n        fallbackInterval,\n        responseTime,\n        emitOnAllTabs,\n        callbacks: this.callbackRefs,\n        start: this.start,\n        reset: this.reset,\n        pause: this.pause,\n        resume: this.resume\n      })\n    }\n  }\n\n  /**\n   * Binds the specified events\n   * @private\n   */\n  _bindEvents () {\n    // Don't bind events if\n    // we are not in a browser\n    if (!IS_BROWSER) return\n    // Otherwise we bind all the events\n    // to the supplied element\n    const { element, events, passive, capture } = this.props\n    if (!this.eventsBound) {\n      events.forEach(e => {\n        element.addEventListener(e, this.handleEvent, {\n          capture,\n          passive\n        })\n      })\n      this.eventsBound = true\n    }\n  }\n\n  /**\n   * Unbinds all the bound events\n   * @private\n   */\n  _unbindEvents (force = false) {\n    // If we are not in a browser\n    // we don't need to unbind events\n    if (!IS_BROWSER) return\n    // Unbind all events\n    const { element, events, passive, capture } = this.props\n    if (this.eventsBound || force) {\n      events.forEach(e => {\n        element.removeEventListener(e, this.handleEvent, {\n          capture,\n          passive\n        })\n      })\n      this.eventsBound = false\n    }\n  }\n\n  /**\n   * Toggles the idle state and calls\n   * the correct action function\n   * @private\n   */\n  _toggleIdleState (e) {\n    // Fire the appropriate action\n    // and pass the event through\n    // Toggle the idle state\n    this.setState((prevState) => ({\n      idle: !prevState.idle,\n      lastIdle: !prevState.idle ? (+new Date()) - this.props.timeout : prevState.lastIdle,\n      idleTime: prevState.idle ? prevState.idleTime + (+new Date()) - prevState.lastIdle : prevState.idleTime\n    }), () => {\n      const { onActive, onIdle, stopOnIdle } = this.props\n      const { idle } = this.state\n      if (idle) {\n        if (stopOnIdle) {\n          // Clear any existing timeout\n          timer.clearTimeout(this.tId)\n          this.tId = null\n          // Unbind events\n          this._unbindEvents()\n        }\n\n        if (this.manager) {\n          /* istanbul ignore next */\n          this.manager.idle()\n        } else {\n          onIdle(e)\n        }\n      } else {\n        this._bindEvents()\n        if (this.manager) {\n          /* istanbul ignore next */\n          this.manager.active()\n        } else {\n          onActive(e)\n        }\n      }\n    })\n  }\n\n  /**\n   * Event handler for supported event types\n   * @param  {Object} e event object\n   * @private\n   */\n  _handleEvent (e) {\n    const { remaining, pageX, pageY, idle } = this.state\n    const { timeout, stopOnIdle } = this.props\n\n    // Fire onAction event\n    this._onAction(e)\n\n    // Already active, ignore events\n    if (remaining) return\n\n    // Mousemove event\n    if (e.type === 'mousemove') {\n      // If coords are same, it didn't move\n      /* istanbul ignore next */\n      if (e.pageX === pageX && e.pageY === pageY) {\n        return\n      }\n      // If coords don't exist how could it move\n      if (typeof e.pageX === 'undefined' && typeof e.pageY === 'undefined') {\n        return\n      }\n      // Under 200 ms is hard to do\n      // continuous activity will bypass this\n      /* istanbul ignore next */\n      const elapsed = this.getElapsedTime()\n      /* istanbul ignore next */\n      if (elapsed < 200) {\n        return\n      }\n    }\n\n    // Clear any existing timeout\n    timer.clearTimeout(this.tId)\n    this.tId = null\n\n    // Determine last time User was active, as can't rely on timer.setTimeout ticking at the correct interval\n    const elapsedTimeSinceLastActive = +new Date() - this.getLastActiveTime()\n\n    // If the user is idle or last active time is more than timeout, flip the idle state\n    if ((idle && !stopOnIdle) || (!idle && elapsedTimeSinceLastActive > timeout)) {\n      this._toggleIdleState(e)\n    }\n\n    // Store when the user was last active\n    // and update the mouse coordinates\n    this.setState({\n      lastActive: +new Date(),\n      pageX: e.pageX,\n      pageY: e.pageY\n    })\n\n    // If the user is idle and stopOnIdle flag is not set\n    // set a new timeout\n    if (idle) {\n      if (!stopOnIdle) {\n        this.tId = timer.setTimeout(this._toggleIdleState, timeout)\n      }\n    } else {\n      this.tId = timer.setTimeout(this._toggleIdleState, timeout)\n    }\n  }\n\n  /**\n   * Set initial state and start timer\n   * @name start\n   */\n  start (remote = true) {\n    // Clear timeout\n    timer.clearTimeout(this.tId)\n    this.tId = null\n\n    // Bind the events\n    this._bindEvents()\n\n    // Reset state\n    this.setState({\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      remaining: null\n    })\n\n    if (this.manager) {\n      /* istanbul ignore next */\n      this.manager.setAllIdle(false)\n      /* istanbul ignore next */\n      if (!remote && this.props.crossTab.emitOnAllTabs) {\n        this.manager.send('start')\n      }\n    }\n\n    // Set new timeout\n    const { timeout } = this.props\n    this.tId = timer.setTimeout(this._toggleIdleState, timeout)\n  }\n\n  /**\n   * Restore initial state and restart timer, calling onActive\n   * @name reset\n   */\n  reset (remote = false) {\n    // Clear timeout\n    timer.clearTimeout(this.tId)\n    this.tId = null\n\n    // Bind the events\n    this._bindEvents()\n\n    if (this.state.idle) {\n      if (this.manager) {\n        /* istanbul ignore next */\n        this.manager.active()\n      } else {\n        this.props.onActive()\n      }\n    }\n\n    if (this.manager) {\n      /* istanbul ignore next */\n      this.manager.setAllIdle(false)\n      /* istanbul ignore next */\n      if (!remote && this.props.crossTab.emitOnAllTabs) {\n        this.manager.send('reset')\n      }\n    }\n\n    // Reset state\n    this.setState({\n      idle: false,\n      oldDate: +new Date(),\n      lastActive: +new Date(),\n      remaining: null\n    })\n\n    // Set new timeout\n    const { timeout } = this.props\n    this.tId = timer.setTimeout(this._toggleIdleState, timeout)\n  }\n\n  /**\n   * Store remaining time and stop timer\n   * @name pause\n   */\n  pause (remote = false) {\n    // Timer is already paused\n    const { remaining } = this.state\n    if (remaining !== null) return\n\n    // Unbind events\n    this._unbindEvents()\n\n    // Clear existing timeout\n    timer.clearTimeout(this.tId)\n    this.tId = null\n\n    // Send event to other tabs\n    if (this.manager) {\n      /* istanbul ignore next */\n      if (!remote && this.props.crossTab.emitOnAllTabs) {\n        this.manager.send('pause')\n      }\n    }\n\n    // Define how much is left on the timer\n    this.setState({\n      remaining: this.getRemainingTime()\n    })\n  }\n\n  /**\n   * Resumes a paused timer\n   * @name resume\n   */\n  resume (remote = false) {\n    // Timer is not paused\n    const { remaining, idle } = this.state\n    if (remaining === null) return\n\n    // Bind events\n    this._bindEvents()\n\n    // Send event to other tabs\n    if (this.manager) {\n      /* istanbul ignore next */\n      if (!remote && this.props.crossTab.emitOnAllTabs) {\n        this.manager.send('resume')\n      }\n    }\n\n    // Start timer and clear remaining\n    // if we are in the active state\n    if (!idle) {\n      // Set a new timeout\n      this.tId = timer.setTimeout(this._toggleIdleState, remaining)\n      // Set new state\n      this.setState({ remaining: null, lastActive: +new Date() })\n    }\n  }\n\n  /**\n   * Time remaining before idle\n   * @name getRemainingTime\n   * @return {number} Milliseconds remaining\n   */\n  getRemainingTime () {\n    const { remaining, lastActive } = this.state\n    const { timeout } = this.props\n\n    // If idle there is no time remaining\n    if (remaining !== null) {\n      return remaining < 0 ? 0 : remaining\n    }\n\n    // Determine remaining, if negative idle didn't finish flipping, just return 0\n    const timeLeft = timeout - ((+new Date()) - lastActive)\n    return timeLeft < 0 ? 0 : timeLeft\n  }\n\n  /**\n   * How much time has elapsed\n   * @name getElapsedTime\n   * @return {Timestamp}\n   */\n  getElapsedTime () {\n    const { oldDate } = this.state\n    return (+new Date()) - oldDate\n  }\n\n  /**\n   * Last time the user was idle\n   * @name getLastIdleTime\n   * @return {Timestamp}\n   */\n  getLastIdleTime () {\n    const { lastIdle } = this.state\n    return lastIdle\n  }\n\n  /**\n   * Total time the user was idle\n   * @name getTotalIdleTime\n   * @return {number}\n   */\n  getTotalIdleTime () {\n    const { idle, lastIdle, idleTime } = this.state\n    if (idle) {\n      return ((+new Date()) - lastIdle) + idleTime\n    } else {\n      return idleTime\n    }\n  }\n\n  /**\n   * Last time the user was active\n   * @name getLastActiveTime\n   * @return {Timestamp}\n   */\n  getLastActiveTime () {\n    const { lastActive } = this.state\n    return lastActive\n  }\n\n  /**\n   * Total time the user was active\n   * @name getTotalActiveTime\n   * @return {number}\n   */\n  getTotalActiveTime () {\n    return this.getElapsedTime() - this.getTotalIdleTime()\n  }\n\n  /**\n   * Returns wether or not the user is idle\n   * @name isIdle\n   * @return {boolean}\n   */\n  isIdle () {\n    const { idle } = this.state\n    return idle\n  }\n\n  /**\n   * Returns wether or not this is the leader tab\n   * @name isLeader\n   * @return {boolean}\n   */\n  isLeader () {\n    return this.manager ? this.manager.isLeader() : true\n  }\n}\n\n/**\n * Type checks for every property\n * @type {Object}\n * @private\n */\nIdleTimer.propTypes = {\n  /**\n   * Activity Timeout in milliseconds\n   * default: 1200000\n   * @type {Number}\n   */\n  timeout: PropTypes.number,\n  /**\n   * DOM events to listen to\n   * default: see [default events](https://github.com/SupremeTechnopriest/react-idle-timer#default-events)\n   * @type {Array}\n   */\n  events: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function to call when user is idle\n   * default: () => {}\n   * @type {Function}\n   */\n  onIdle: PropTypes.func,\n  /**\n   * Function to call when user becomes active\n   * default: () => {}\n   * @type {Function}\n   */\n  onActive: PropTypes.func,\n  /**\n   * Function to call on user actions\n   * default: () => {}\n   * @type {Function}\n   */\n  onAction: PropTypes.func,\n  /**\n   * Debounce the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  debounce: PropTypes.number,\n  /**\n   * Throttle the onAction function by setting delay in milliseconds\n   * default: 0\n   * @type {Number}\n   */\n  throttle: PropTypes.number,\n  /**\n   * Throttle the event handler function by setting delay in milliseconds\n   * default: 200\n   * @type {Number}\n   */\n  eventsThrottle: PropTypes.number,\n  /**\n   * Element reference to bind activity listeners to\n   * default: document\n   * @type {Object}\n   */\n  element: PropTypes.oneOfType([PropTypes.object, PropTypes.element]),\n  /**\n   * Start the timer on mount\n   * default: true\n   * @type {Boolean}\n   */\n  startOnMount: PropTypes.bool,\n  /**\n   * Require the timer to be started manually.\n   * default: false\n   * @type {Boolean}\n   */\n  startManually: PropTypes.bool,\n  /**\n   * Once the user goes idle the IdleTimer will not\n   * reset on user input instead, reset() must be\n   * called manually to restart the timer\n   * default: false\n   * @type {Boolean}\n   */\n  stopOnIdle: PropTypes.bool,\n  /**\n   * Bind events passively\n   * default: true\n   * @type {Boolean}\n   */\n  passive: PropTypes.bool,\n  /**\n   * Capture events\n   * default: true\n   * @type {Boolean}\n   */\n  capture: PropTypes.bool,\n  /**\n   * Cross Tab functionality.\n   * default: false\n   * @type {Boolean|Object}\n   */\n  crossTab: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      type: PropTypes.oneOf(['broadcastChannel', 'localStorage', 'simulate']),\n      channelName: PropTypes.string,\n      fallbackInterval: PropTypes.number,\n      responseTime: PropTypes.number,\n      removeTimeout: PropTypes.number,\n      emitOnAllTabs: PropTypes.bool\n    })\n  ])\n}\n\n/**\n * Sets default property values\n * @type {Object}\n * @private\n */\nIdleTimer.defaultProps = {\n  timeout: 1000 * 60 * 20,\n  element: DEFAULT_ELEMENT,\n  events: DEFAULT_EVENTS,\n  onIdle: () => { },\n  onActive: () => { },\n  onAction: () => { },\n  debounce: 0,\n  throttle: 0,\n  eventsThrottle: 200,\n  startOnMount: true,\n  startManually: false,\n  stopOnIdle: false,\n  capture: true,\n  passive: true,\n  crossTab: false\n}\n\nexport default IdleTimer\n","/**\n *  ___    _ _     _____ _\n * |_ _|__| | | __|_   _(_)_ __ ___   ___ _ __\n *  | |/ _` | |/ _ \\| | | | '_ ` _ \\ / _ \\ '__|\n *  | | (_| | |  __/| | | | | | | | |  __/ |\n * |___\\__,_|_|\\___||_| |_|_| |_| |_|\\___|_|\n *\n * @name useIdleTimer\n * @author Randy Lebeau\n * @private\n */\n\nimport { useEffect, useRef, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport timer from './timer'\nimport { TabManager } from './TabManager'\nimport { IS_BROWSER, DEFAULT_ELEMENT, DEFAULT_EVENTS, debounced, throttled } from './utils'\n\n/**\n * Detects when your user is idle\n * @function useIdleTimer\n * @private\n */\nfunction useIdleTimer ({\n  timeout = 1000 * 60 * 20,\n  element = DEFAULT_ELEMENT,\n  events = DEFAULT_EVENTS,\n  onIdle = () => { },\n  onActive = () => { },\n  onAction = () => { },\n  debounce = 0,\n  throttle = 0,\n  eventsThrottle = 200,\n  startOnMount = true,\n  startManually = false,\n  stopOnIdle = false,\n  capture = true,\n  passive = true,\n  crossTab = false\n} = {}) {\n  const eventsBound = useRef(false)\n  const idle = useRef(true)\n  const oldDate = useRef(+new Date())\n  const remaining = useRef(null)\n  const pageX = useRef(null)\n  const pageY = useRef(null)\n  const tId = useRef(null)\n  const lastActive = useRef(null)\n  const lastIdle = useRef(null)\n  const idleTime = useRef(0)\n  const firstLoad = useRef(true)\n  const _timeout = useRef(timeout)\n  const manager = useRef(null)\n\n  /* istanbul ignore next */\n  if (crossTab) {\n    if (crossTab === true) crossTab = {}\n    crossTab = Object.assign({\n      channelName: 'idle-timer',\n      fallbackInterval: 2000,\n      responseTime: 100,\n      removeTimeout: 1000 * 60,\n      emitOnAllTabs: false\n    }, crossTab)\n  }\n\n  // Event emitters\n  const emitOnIdle = useRef(onIdle)\n  const emitOnActive = useRef(onActive)\n  const emitOnAction = useRef(onAction)\n\n  useEffect(() => {\n    emitOnIdle.current = onIdle\n  }, [onIdle])\n\n  useEffect(() => {\n    emitOnActive.current = onActive\n  }, [onActive])\n\n  useEffect(() => {\n    emitOnAction.current = onAction\n  }, [onAction])\n\n  const intermediateOnAction = useMemo(() => {\n    function callOnAction (e) {\n      emitOnAction.current(e)\n    }\n\n    // Cancel any existing debounce timeouts\n    if (callOnAction.cancel) callOnAction.cancel()\n\n    // Create debounced action if applicable\n    if (debounce > 0) {\n      return debounced(callOnAction, debounce)\n\n      // Create throttled action if applicable\n    } else if (throttle > 0) {\n      return throttled(callOnAction, throttle)\n\n      // No throttle or debounce\n    } else {\n      return callOnAction\n    }\n  }, [throttle, debounce])\n\n  /**\n   * Toggles the idle state and calls\n   * the correct action function\n   * @private\n   */\n  const _toggleIdleState = e => {\n    const nextIdle = !idle.current\n    idle.current = nextIdle\n    if (nextIdle) {\n      if (stopOnIdle) {\n        // Clear any existing timeout\n        timer.clearTimeout(tId.current)\n        tId.current = null\n        // Unbind events\n        _unbindEvents()\n      }\n      lastIdle.current = (+new Date()) - _timeout.current\n      if (manager.current) {\n        /* istanbul ignore next */\n        manager.current.idle()\n      } else {\n        emitOnIdle.current(e)\n      }\n    } else {\n      idleTime.current += (+new Date()) - lastIdle.current\n      _bindEvents()\n      if (manager.current) {\n        /* istanbul ignore next */\n        manager.current.active()\n      } else {\n        emitOnActive.current(e)\n      }\n    }\n  }\n\n  /**\n   * Event handler\n   * @param {Event} e\n   */\n  const _handleEvent = e => {\n    // Fire onAction event\n    intermediateOnAction(e)\n\n    // Already active, ignore events\n    if (remaining.current) return\n\n    // Mousemove event\n    /* istanbul ignore next */\n    if (e.type === 'mousemove') {\n      // If coords are same, it didn't move\n      if (e.pageX === pageX && e.pageY === pageY) {\n        return\n      }\n      // If coords don't exist how could it move\n      if (typeof e.pageX === 'undefined' && typeof e.pageY === 'undefined') {\n        return\n      }\n      // Under 200 ms is hard to do\n      // continuous activity will bypass this\n      const elapsed = getElapsedTime()\n      if (elapsed < 200) {\n        return\n      }\n    }\n\n    // Clear any existing timeout\n    timer.clearTimeout(tId.current)\n    tId.current = null\n\n    // Determine last time User was active, as can't rely on timer.setTimeout ticking at the correct interval\n    const elapsedTimeSinceLastActive = +new Date() - getLastActiveTime()\n\n    // If the user is idle or last active time is more than timeout, flip the idle state\n    if (\n      (idle.current && !stopOnIdle) ||\n      (!idle.current && elapsedTimeSinceLastActive > _timeout.current)\n    ) {\n      _toggleIdleState(e)\n    }\n\n    // Store when the user was last active\n    // and update the mouse coordinates\n    lastActive.current = +new Date()\n    pageX.current = e.pageX\n    pageY.current = e.pageY\n\n    // If the user is active, set a new timeout\n    if (!idle.current) {\n      tId.current = timer.setTimeout(_toggleIdleState, _timeout.current)\n    }\n  }\n\n  /**\n   * Reference to current handleEvent function.\n   * @private\n   */\n  const handleEvent = useRef(_handleEvent)\n\n  /**\n   * Binds the specified events\n   * @private\n   */\n  const _bindEvents = () => {\n    // Don't bind events if\n    // we are not in a browser\n    if (!IS_BROWSER) return\n    // Otherwise we bind all the events\n    // to the supplied element\n    if (!eventsBound.current) {\n      events.forEach(e => {\n        element.addEventListener(e, handleEvent.current, {\n          capture,\n          passive\n        })\n      })\n      eventsBound.current = true\n    }\n  }\n\n  /**\n   * Unbinds all the bound events\n   * @private\n   */\n  const _unbindEvents = (force = false) => {\n    // If we are not in a browser\n    // we don't need to unbind events\n    if (!IS_BROWSER) return\n    // Unbind all events\n    if (eventsBound.current || force) {\n      events.forEach(e => {\n        element.removeEventListener(e, handleEvent.current, {\n          capture,\n          passive\n        })\n      })\n      eventsBound.current = false\n    }\n  }\n\n  /**\n   * Time remaining before idle\n   * @name getRemainingTime\n   * @return {number} Milliseconds remaining\n   */\n  const getRemainingTime = () => {\n    // If idle there is no time remaining\n    if (remaining.current !== null) {\n      return remaining.current < 0 ? 0 : remaining.current\n    }\n\n    // Determine remaining, if negative idle didn't finish flipping, just return 0\n    const timeLeft = _timeout.current - ((+new Date()) - lastActive.current)\n    return timeLeft < 0 ? 0 : timeLeft\n  }\n\n  /**\n   * How much time has elapsed\n   * @name getElapsedTime\n   * @return {Timestamp}\n   */\n  const getElapsedTime = () => (+new Date()) - oldDate.current\n\n  /**\n   * Last time the user was idle\n   * @name getLastIdleTime\n   * @return {Timestamp}\n   */\n  const getLastIdleTime = () => lastIdle.current\n\n  /**\n   * Get the total time user is idle\n   * @name getTotalIdleTime\n   * @return {number} Milliseconds idle\n   */\n  const getTotalIdleTime = () => {\n    if (idle.current) {\n      return ((+new Date()) - lastIdle.current) + idleTime.current\n    } else {\n      return idleTime.current\n    }\n  }\n\n  /**\n   * Last time the user was active\n   * @name getLastActiveTime\n   * @return {Timestamp}\n   */\n  const getLastActiveTime = () => lastActive.current\n\n  /**\n   * Get the total time user is active\n   * @name getTotalActiveTime\n   * @return {number} Milliseconds active\n   */\n  const getTotalActiveTime = () => getElapsedTime() - getTotalIdleTime()\n\n  /**\n   * Returns wether or not the user is idle\n   * @name isIdle\n   * @return {Boolean}\n   */\n  const isIdle = () => idle.current\n\n  /**\n   * Returns wether or not this is the leader tab\n   * @returns {Boolean}\n   */\n  const isLeader = () => manager.current ? manager.current.isLeader() : true\n\n  /**\n  * Set initial state and start timer\n  * @name reset\n  */\n  const start = (remote = false) => {\n    // Clear timeout\n    timer.clearTimeout(tId.current)\n    tId.current = null\n\n    // Bind the events\n    _bindEvents()\n\n    // Set state\n    idle.current = false\n    oldDate.current = +new Date()\n    lastActive.current = +new Date()\n    remaining.current = null\n\n    if (manager.current) {\n      /* istanbul ignore next */\n      manager.current.setAllIdle(false)\n      /* istanbul ignore next */\n      if (!remote && crossTab.emitOnAllTabs) {\n        manager.current.send('start')\n      }\n    }\n\n    // Set new timeout\n    tId.current = timer.setTimeout(_toggleIdleState, _timeout.current)\n  }\n\n  /**\n  * Restore initial state and restart timer, calling onActive\n  * @name reset\n  */\n  const reset = (remote = false) => {\n    // Clear timeout\n    timer.clearTimeout(tId.current)\n    tId.current = null\n\n    // Bind the events\n    _bindEvents()\n\n    // Emit active\n    if (idle.current) {\n      if (manager.current) {\n        /* istanbul ignore next */\n        manager.current.active()\n      } else {\n        emitOnActive.current()\n      }\n    }\n\n    // Reset state\n    idle.current = false\n    oldDate.current = +new Date()\n    lastActive.current = +new Date()\n    remaining.current = null\n\n    if (manager.current) {\n      /* istanbul ignore next */\n      manager.current.setAllIdle(false)\n      /* istanbul ignore next */\n      if (!remote && crossTab.emitOnAllTabs) {\n        manager.current.send('reset')\n      }\n    }\n\n    // Set new timeout\n    tId.current = timer.setTimeout(_toggleIdleState, _timeout.current)\n  }\n\n  /**\n   * Store remaining time and stop timer\n   * @name pause\n   */\n  const pause = (remote = false) => {\n    // Timer is already paused\n    if (remaining.current !== null) return\n\n    // Unbind events\n    _unbindEvents()\n\n    // Clear existing timeout\n    timer.clearTimeout(tId.current)\n    tId.current = null\n\n    // Define how much is left on the timer\n    remaining.current = getRemainingTime()\n\n    if (manager.current) {\n      /* istanbul ignore next */\n      if (!remote && crossTab.emitOnAllTabs) {\n        manager.current.send('pause')\n      }\n    }\n  }\n\n  /**\n   * Resumes a paused timer\n   * @name resume\n   */\n  const resume = (remote = false) => {\n    // Timer is not paused\n    if (remaining.current === null) return\n\n    // Bind events\n    _bindEvents()\n\n    // Start timer and clear remaining\n    // if we are in the idle state\n    if (!idle.current) {\n      // Set a new timeout\n      tId.current = timer.setTimeout(_toggleIdleState, remaining.current)\n      // Set states\n      remaining.current = null\n      lastActive.current = +new Date()\n    }\n\n    if (manager.current) {\n      /* istanbul ignore next */\n      if (!remote && crossTab.emitOnAllTabs) {\n        manager.current.send('resume')\n      }\n    }\n  }\n\n  /**\n   * Hook lifecycle\n   */\n  useEffect(() => {\n    // Debounce and throttle can't both be set\n    if (debounce > 0 && throttle > 0) {\n      throw new Error('onAction can either be throttled or debounced (not both)')\n    }\n\n    // Set up cross tab\n    /* istanbul ignore next */\n    if (crossTab) {\n      manager.current = TabManager({\n        type: crossTab.type,\n        channelName: crossTab.channelName,\n        fallbackInterval: crossTab.fallbackInterval,\n        responseTime: crossTab.responseTime,\n        emitOnAllTabs: crossTab.emitOnAllTabs,\n        callbacks: {\n          onIdle: emitOnIdle.current,\n          onActive: emitOnActive.current\n        },\n        start,\n        reset,\n        pause,\n        resume\n      })\n    }\n\n    // If startOnMount is enabled, start the timer\n    if (startManually) {\n      return async () => {\n        timer.clearTimeout(tId.current)\n        _unbindEvents(true)\n        if (crossTab) await manager.current.close()\n      }\n    }\n\n    if (startOnMount) {\n      start()\n    } else {\n      _bindEvents()\n    }\n\n    // Clear and unbind on unmount\n    return async () => {\n      timer.clearTimeout(tId.current)\n      _unbindEvents(true)\n      if (intermediateOnAction.cancel) intermediateOnAction.cancel()\n      if (crossTab) await manager.current.close()\n    }\n  }, [])\n\n  useEffect(() => {\n    const eventsWereBound = eventsBound.current\n    if (eventsWereBound) _unbindEvents()\n    if (eventsThrottle > 0) {\n      handleEvent.current = throttled(_handleEvent, eventsThrottle)\n    } else {\n      handleEvent.current = _handleEvent\n    }\n    if (eventsWereBound) _bindEvents()\n  }, [eventsThrottle])\n\n  useEffect(() => {\n    _timeout.current = timeout\n    if (!firstLoad.current && idle.current) {\n      reset()\n    }\n    firstLoad.current = false\n  }, [timeout])\n\n  return {\n    isIdle,\n    isLeader,\n    start,\n    pause,\n    reset,\n    resume,\n    getLastIdleTime,\n    getTotalIdleTime,\n    getLastActiveTime,\n    getTotalActiveTime,\n    getElapsedTime,\n    getRemainingTime\n  }\n}\n\n/**\n * Type checks for every property\n * @type {Object}\n * @private\n */\nuseIdleTimer.propTypes = {\n  /**\n   * Activity Timeout in milliseconds\n   * default: 1200000\n   * @type {number}\n   */\n  timeout: PropTypes.number,\n  /**\n   * DOM events to listen to\n   * default: see [default events](https://github.com/SupremeTechnopriest/react-idle-timer#default-events)\n   * @type {Array}\n   */\n  events: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Function to call when user is idle.\n   * default: () => {}\n   * @type {Function}\n   */\n  onIdle: PropTypes.func,\n  /**\n   * Function to call when user becomes active.\n   * default: () => {}\n   * @type {Function}\n   */\n  onActive: PropTypes.func,\n  /**\n   * Function to call on user actions.\n   * default: () => {}\n   * @type {Function}\n   */\n  onAction: PropTypes.func,\n  /**\n   * Debounce the onAction function by setting delay in milliseconds.\n   * default: 0\n   * @type {number}\n   */\n  debounce: PropTypes.number,\n  /**\n   * Throttle the onAction function by setting delay in milliseconds.\n   * default: 0\n   * @type {number}\n   */\n  throttle: PropTypes.number,\n  /**\n   * Throttle the event handler function by setting delay in milliseconds.\n   * default: 200\n   * @type {number}\n   */\n  eventsThrottle: PropTypes.number,\n  /**\n   * Element reference to bind activity listeners to.\n   * default: document\n   * @type {Object}\n   */\n  element: PropTypes.oneOfType([PropTypes.object, PropTypes.element]),\n  /**\n   * Start the timer on mount.\n   * default: true\n   * @type {Boolean}\n   */\n  startOnMount: PropTypes.bool,\n  /**\n   * Require the timer to be started manually.\n   * default: false\n   * @type {Boolean}\n   */\n  startManually: PropTypes.bool,\n  /**\n   * Once the user goes idle the IdleTimer will not\n   * reset on user input instead, start() or reset() must be\n   * called manually to restart the timer.\n   * default: false\n   * @type {Boolean}\n   */\n  stopOnIdle: PropTypes.bool,\n  /**\n   * Bind events passively.\n   * default: true\n   * @type {Boolean}\n   */\n  passive: PropTypes.bool,\n  /**\n   * Capture events.\n   * default: true\n   * @type {Boolean}\n   */\n  capture: PropTypes.bool,\n  /**\n   * Cross Tab functionality.\n   * default: false\n   * @type {Boolean|Object}\n   */\n  crossTab: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      type: PropTypes.oneOf(['broadcastChannel', 'localStorage', 'simulate']),\n      channelName: PropTypes.string,\n      fallbackInterval: PropTypes.number,\n      responseTime: PropTypes.number,\n      removeTimeout: PropTypes.number,\n      emitOnAllTabs: PropTypes.bool\n    })\n  ])\n}\n\n/**\n * Sets default property values\n * @type {Object}\n * @private\n */\nuseIdleTimer.defaultProps = {\n  timeout: 1000 * 60 * 20,\n  element: DEFAULT_ELEMENT,\n  events: DEFAULT_EVENTS,\n  onIdle: () => { },\n  onActive: () => { },\n  onAction: () => { },\n  debounce: 0,\n  throttle: 0,\n  eventsThrottle: 200,\n  startOnMount: true,\n  startManually: false,\n  stopOnIdle: false,\n  capture: true,\n  passive: true,\n  crossTab: false\n}\n\nexport default useIdleTimer\n"],"names":["MAX_SAFE_INTEGER","undefined","Number","LAST_NUMBER_WEAK_MAP","WeakMap","lastNumberWeakMap","generateUniqueNumber","cache","collection","lastNumber","get","nextNumber","size","TWO_TO_THE_POWER_OF_TWENTY_NINE","has","Math","floor","random","Error","createGenerateUniqueNumber","set","workerTimers","loadWorkerTimers","load","worker","blob","Blob","type","url","URL","createObjectURL","setTimeout","revokeObjectURL","createLoadWorkerTimers","scheduledIntervalFunctions","Map","scheduledTimeoutFunctions","unrespondedRequests","Worker","addEventListener","data","message","method","params","timerId","timerType","idOrFunc","timerIdAndTimerType","delete","error","id","isClearResponse","clearInterval","postMessage","clearTimeout","setInterval","func","delay","now","performance","isWebWorkerSupported","window","timer","intervalId","timeoutId","callback","IS_BROWSER","DEFAULT_ELEMENT","document","DEFAULT_EVENTS","debounced","fn","result","args","cancel","throttled","lastCall","Date","getTime","lastMs","additional","microSeconds","ms","randomToken","toString","substring","sleep","time","Promise","resolve","create","channelName","state","messagesCallback","bc","BroadcastChannel","onmessage","msg","close","channelState","onMessage","messageJson","err","reject","canBeUsed","averageResponseTime","ObliviousSet","ttl","Set","timeMap","value","this","add","_removeTooOldValues","clear","olderThen","iterator","Symbol","next","getLocalStorage","localStorage","e","addStorageEventListener","key","listener","ev","JSON","parse","newValue","ls","setItem","removeItem","options","uuid","eMIs","removeTimeout","msgObj","token","messagesCallbackTime","removeEventListener","writeObj","stringify","createEvent","initEvent","dispatchEvent","userAgent","navigator","toLowerCase","includes","defaultTime","SIMULATE_CHANNELS","name","Array","from","filter","channel","forEach","METHODS","BroadcastChannelMethod","LocalStorageMethod","chooseMethod","SimulateMethod","find","m","useMethod","map","MessageChannel","closed","_isListening","_onMessageListener","_addEventListeners","internal","_unSendMessagePromises","_beforeClose","_preparePromises","_prepareChannel","_post","listenObj","_removeListenerObject","_addListenerObject","obj","awaitPrepare","then","all","_this","_state","messageChannel","sendPromise","maybePromise","s","_hasMessageListeners","length","push","listenerFn","_startListening","o","_stopListening","LeaderElection","_channel","_options","isLeader","isDead","_isApplying","_reApply","_unloadFns","_listeners","_intervals","_duplicateListeners","_duplicateCalled","_onBeforeDie","unloadFn","die","stopCriteria","handleMessage","context","_this2","action","_sendMessage","responseTime","leaderElector","isLeaderListener","beLeader","success","applyOnce","_awaitLeadershipPromise","resolved","finish","interval","whenDeathListener","fallbackInterval","onBeforeDie","_this3","uFn","msgJson","postInternal","TabManager","emitOnAllTabs","callbacks","start","reset","pause","resume","elector","_leaderElector","createLeaderElection","registry","leader","allIdle","awaitLeadership","idle","active","onIdle","onActive","isIdle","Object","values","every","v","send","isActive","some","onDuplicate","isAllIdle","setAllIdle","bool","IdleTimer","props","oldDate","lastActive","lastIdle","idleTime","remaining","pageX","pageY","tId","eventsBound","callbackRefs","debounce","throttle","_onAction","onAction","eventsThrottle","handleEvent","_handleEvent","bind","startOnMount","startManually","_toggleIdleState","getRemainingTime","getElapsedTime","getLastActiveTime","getLastIdleTime","getTotalIdleTime","getTotalActiveTime","_setupTabManager","_bindEvents","prevProps","_unbindEvents","timeout","manager","console","children","crossTab","assign","element","events","passive","capture","force","setState","prevState","_this4","stopOnIdle","elapsedTimeSinceLastActive","remote","timeLeft","Component","useIdleTimer","useRef","firstLoad","_timeout","emitOnIdle","emitOnActive","emitOnAction","useEffect","current","intermediateOnAction","useMemo","callOnAction","nextIdle","eventsWereBound","propTypes","PropTypes","number","arrayOf","string","oneOfType","object","shape","oneOf","defaultProps"],"mappings":"iwBAEO,MCIDA,OAA+CC,IAA5BC,OAAOF,iBAAiC,iBAAmBE,OAAOF,iBCIrFG,EAAuB,IAAIC,QFRUC,IAAAA,EEW3C,MAAMC,EDHkE,EAACC,EAAOF,IACpEG,UACEC,EAAaJ,EAAkBK,IAAIF,OAUrCG,OAA4BV,IAAfQ,EAA2BD,EAAWI,KAAOH,EAdnCI,WAc6EJ,EAAa,EAAI,MAEpHD,EAAWM,IAAIH,UACTJ,EAAMC,EAAYG,MASzBH,EAAWI,KA3BiB,UA2BuB,MAC5CJ,EAAWM,IAAIH,IAClBA,EAAaI,KAAKC,MA5BCH,WA4BKE,KAAKE,iBAG1BV,EAAMC,EAAYG,MAIzBH,EAAWI,KAAOZ,QACZ,IAAIkB,MAAM,uGAIbV,EAAWM,IAAIH,IAClBA,EAAaI,KAAKC,MAAMD,KAAKE,SAAWjB,UAGrCO,EAAMC,EAAYG,ICvCJQ,EFXcd,EEUjBF,EFTf,CAACK,EAAYG,KAChBN,EAAkBe,IAAIZ,EAAYG,GAE3BA,IEOgDR,GCX/D,IAAIkB,EAAqC,KAElC,MCMDC,EDN0D,EAACC,EAAMC,IAC5D,QACkB,OAAjBH,SACOA,QAGLI,EAAO,IAAIC,KAAK,CAACF,GAAS,CAAEG,KAAM,0CAClCC,EAAMC,IAAIC,gBAAgBL,UAEhCJ,EAAeE,EAAKK,GAGpBP,EAAaU,YAAW,IAAMF,IAAIG,gBAAgBJ,IAAM,GAEjDP,GCRUY,ECLJL,UAEXM,EAA6D,IAAIC,IAAI,CAAC,CAAC,EAAG,UAC1EC,EAA4D,IAAID,IAAI,CAAC,CAAC,EAAG,UACzEE,EAA+E,IAAIF,IAEnFX,EAAS,IAAIc,OAAOV,GAE1BJ,EAAOe,iBAAiB,WAAW,EAAGC,KAAAA,cCVSvC,KADhBwC,EDYJD,GCXSE,QAAgE,SAApBD,EAASC,ODWvD,OAEtBC,QAAQC,QAAEA,EAAFC,UAAWA,IACnBL,KAEc,aAAdK,EAA0B,OACpBC,EAAWZ,EAA2BxB,IAAIkC,MAExB,iBAAbE,EAAuB,OACxBC,EAAsBV,EAAoB3B,IAAIoC,WAGxB7C,IAAxB8C,GACAA,EAAoBH,UAAYA,GAChCG,EAAoBF,YAAcA,QAE5B,IAAI3B,MAAM,2CAEjB,CAAA,QAAwB,IAAb4B,QAGR,IAAI5B,MAAM,uCAFhB4B,UAID,GAAkB,YAAdD,EAAyB,OAC1BC,EAAWV,EAA0B1B,IAAIkC,MAEvB,iBAAbE,EAAuB,OACxBC,EAAsBV,EAAoB3B,IAAIoC,WAGxB7C,IAAxB8C,GACAA,EAAoBH,UAAYA,GAChCG,EAAoBF,YAAcA,QAE5B,IAAI3B,MAAM,2CAEjB,CAAA,QAAwB,IAAb4B,QAMR,IAAI5B,MAAM,uCALhB4B,IAGAV,EAA0BY,OAAOJ,SAKtC,CAAA,IEzDiBH,CAAAA,GACe,OAAnBA,EAASQ,OAAwC,iBAAfR,EAAQS,GFwDnDC,CAAgBX,GAkBpB,OAECS,OAAOR,QAAEA,IACTD,QAEE,IAAItB,MAAMuB,GAvBc,OACxBS,GAAEA,GAAOV,EAETO,EAAsBV,EAAoB3B,IAAIwC,WAExBjD,IAAxB8C,QACM,IAAI7B,MAAM,6CAGd0B,QAAEA,EAAFC,UAAWA,GAAcE,EAE/BV,EAAoBW,OAAOE,GAET,aAAdL,EACAX,EAA2Bc,OAAOJ,GAElCR,EAA0BY,OAAOJ,ICzEdH,IAAAA,WDoKxB,CACHW,cAjFmBR,UACbM,EAAK5C,EAAqB+B,GAEhCA,EAAoBjB,IAAI8B,EAAI,CAAEN,QAAAA,EAASC,UAAW,aAClDX,EAA2Bd,IAAIwB,EAASM,GAExC1B,EAAO6B,YAA2B,CAC9BH,GAAAA,EACAR,OAAQ,QACRC,OAAQ,CAAEC,QAAAA,EAASC,UAAW,eAyElCS,aArEkBV,UACZM,EAAK5C,EAAqB+B,GAEhCA,EAAoBjB,IAAI8B,EAAI,CAAEN,QAAAA,EAASC,UAAW,YAClDT,EAA0BhB,IAAIwB,EAASM,GAEvC1B,EAAO6B,YAA2B,CAC9BH,GAAAA,EACAR,OAAQ,QACRC,OAAQ,CAAEC,QAAAA,EAASC,UAAW,cA6DlCU,YAzDgB,CAACC,EAAgBC,WAC3Bb,EAAUtC,EAAqB4B,UAErCA,EAA2Bd,IAAIwB,GAAS,KACpCY,IAGuD,mBAA5CtB,EAA2BxB,IAAIkC,IACtCpB,EAAO6B,YAA8B,CACjCH,GAAI,KACJR,OAAQ,MACRC,OAAQ,CACJc,MAAAA,EACAC,IAAKC,YAAYD,MACjBd,QAAAA,EACAC,UAAW,iBAM3BrB,EAAO6B,YAA8B,CACjCH,GAAI,KACJR,OAAQ,MACRC,OAAQ,CACJc,MAAAA,EACAC,IAAKC,YAAYD,MACjBd,QAAAA,EACAC,UAAW,cAIZD,GA0BPb,WAvBe,CAACyB,EAAgBC,WAC1Bb,EAAUtC,EAAqB8B,UAErCA,EAA0BhB,IAAIwB,EAASY,GAEvChC,EAAO6B,YAA8B,CACjCH,GAAI,KACJR,OAAQ,MACRC,OAAQ,CACJc,MAAAA,EACAC,IAAKC,YAAYD,MACjBd,QAAAA,EACAC,UAAW,aAIZD,MGlKO,87CCCtB,IAAMgB,IAAyBC,OAAOvB,QAA4B,oBAAXA,OAEjDwB,EAAQ,GAEdA,EAAMV,cAAgB,SAACW,GLQuCnB,IAAAA,EKPxDgB,GLOwDhB,EKN/BmB,ELM2CzC,IAAmB8B,cAAcR,IKJvGQ,cAAcW,IAIlBD,EAAMR,aAAe,SAACU,GLEsCpB,IAAAA,EKDtDgB,GLCsDhB,EKA9BoB,ELA0C1C,IAAmBgC,aAAaV,IKEpGU,aAAaU,IAIjBF,EAAMP,YAAc,SAACU,EAAUR,GACzBG,ELLmD,EAACJ,EAAMC,KAAUnC,IAAmBiC,YAAYC,EAAMC,IKM3GpC,CAAyB4C,EAAUR,GAEnCF,YAAYU,EAAUR,IAI1BK,EAAM/B,WAAa,SAACkC,EAAUR,GACxBG,ELXiD,EAACJ,EAAMC,KAAUnC,IAAmBS,WAAWyB,EAAMC,IKYxGpC,CAAwB4C,EAAUR,GAElC1B,WAAWkC,EAAUR,IC1BlB,IAAMS,EACuD,YAA/C,oBAAXL,4BAA8CA,OAArB,sBAAqBA,SAO3CM,EAAkBD,EAAaE,SAAW,GAO1CC,EAAiB,CAC5B,YACA,UACA,QACA,iBACA,aACA,YACA,aACA,YACA,gBACA,gBACA,oBAaK,SAASC,EAAWC,EAAId,OACzBb,WACK4B,+BAAWC,2BAAAA,kBACd7B,GACFkB,EAAMR,aAAaV,GAErBA,EAAUkB,EAAM/B,YAAW,WACzBwC,eAAME,GACN7B,EAAU,OACTa,UAGLe,EAAOE,OAAS,WACdZ,EAAMR,aAAaV,IAGd4B,EAYF,SAASG,EAAWJ,EAAId,OACzBmB,EAAW,SACR,eACClB,GAAM,IAAImB,MAAOC,eACnBpB,EAAMkB,EAAWnB,UAGrBmB,EAAWlB,EACJa,2BAIX,IAAIQ,EAAS,EACTC,EAAa,EAQV,SAASC,QACRC,GAAK,IAAIL,MAAOC,iBAClBI,IAAOH,EAEG,IAALG,KADPF,GAGAD,EAASG,EACTF,EAAa,EACD,IAALE,GAUJ,SAASC,WACPpE,KAAKE,SAASmE,SAAS,IAAIC,UAAU,GAyBvC,SAASC,QAAOC,yDAAO,SACrB,IAAIC,SAAQ,SAAAC,UAAW3B,EAAM/B,WAAW0D,EAASF,MASnD,SAAS7B,WACP,IAAImB,MAAOC,UCpGpB,MAAe,CACbY,OA/CK,SAAiBC,OAChBC,EAAQ,CACZC,iBAAkB,KAClBC,GAAI,IAAIC,iBAAiBJ,WAG3BC,EAAME,GAAGE,UAAY,SAAAC,GACfL,EAAMC,kBACRD,EAAMC,iBAAiBI,EAAIzD,OAIxBoD,GAoCPM,MAjCK,SAAgBC,GACrBA,EAAaL,GAAGI,SAiChBE,UApBK,SAAoBD,EAAc5B,GACvC4B,EAAaN,iBAAmBtB,GAoBhClB,YA/BK,SAAsB8C,EAAcE,cAEvCF,EAAaL,GAAGzC,YAAYgD,GAAa,GAClCb,QAAQC,UACf,MAAOa,UAEAd,QAAQe,OAAOD,KA0BxBE,UAlBK,iBAC2B,mBAArBT,kBAkBXpE,KAtDkB,mBAuDlB8E,oBAXK,kBACE,KAWPxB,aAAAA,GCzDmByB,8BACNC,yDAAM,2BACZA,IAAMA,OACNvF,IAAM,IAAIwF,SACVC,QAAU,IAAI1E,yCAGrB,SAAK2E,UACIC,KAAK3F,IAAIN,IAAIgG,sBAGtB,SAAKA,QACED,QAAQzF,IAAI0F,EAAOpD,UACnBtC,IAAI4F,IAAIF,QACRG,2CAGP,gBACO7F,IAAI8F,aACJL,QAAQK,2CAGf,mBACQC,EAAYzD,IAAQqD,KAAKJ,IACzBS,EAAWL,KAAK3F,IAAIiG,OAAOD,cAEpB,KACLN,EAAQM,EAASE,OAAOR,UACzBA,EAAO,YACCC,KAAKF,QAAQnG,IAAIoG,GACnBK,eACJN,eAAeC,QACf1F,WAAW0F,aCtBjB,SAASS,QACVC,KACkB,oBAAX3D,OAAwB,OAAO,SAExC2D,EAAe3D,OAAO2D,aACtBA,EAAe3D,OAAO,8BAAgCA,OAAO2D,aAC7D,MAAOC,WAKFD,EAsCF,SAASE,EAAyB/B,EAAapB,OAC9CoD,EAAiBhC,EACjBiC,EAAW,SAAAC,GACXA,EAAGF,MAAQA,GACbpD,EAAGuD,KAAKC,MAAMF,EAAGG,mBAGrBnE,OAAOtB,iBAAiB,UAAWqF,GAC5BA,EAoDF,SAASpB,QACRyB,EAAKV,QAENU,EAAI,OAAO,UAGRN,EAAM,UACZM,EAAGC,QAAQP,EAAK,SAChBM,EAAGE,WAAWR,GACd,MAAOF,UAMA,SAGF,EAcT,MAAe,CACb/B,OA/EK,SAAiBC,OAAayC,yDAAU,OACxC5B,UAEG,IAAItF,MAAM,sCAGZmH,EAAOlD,IAOPmD,EAAO,IAAI5B,EAAa0B,EAAQG,eAEhC3C,EAAQ,CACZD,YAAAA,EACA0C,KAAAA,EACAC,KAAAA,UAGF1C,EAAMgC,SAAWF,EACf/B,GACA,SAAC6C,GACM5C,EAAMC,kBACP2C,EAAOH,OAASA,GACfG,EAAOC,QAASH,EAAKxH,IAAI0H,EAAOC,SACjCD,EAAOhG,KAAK+C,MAAQiD,EAAOhG,KAAK+C,KAAOK,EAAM8C,uBAEjDJ,EAAKtB,IAAIwB,EAAOC,OAChB7C,EAAMC,iBAAiB2C,EAAOhG,WAI3BoD,GA8CPM,MA3CK,SAAgBC,GAzChB,IAAqCyB,EAAAA,EA0CfzB,EAAayB,SAzCxC/D,OAAO8E,oBAAoB,UAAWf,IAoFtCxB,UAxCK,SAAoBD,EAAc5B,EAAIgB,GAC3CY,EAAauC,qBAAuBnD,EACpCY,EAAaN,iBAAmBtB,GAuChClB,YA3HK,SAAsB8C,EAAcE,UAClC,IAAIb,SAAQ,SAAAC,OACXkC,EAAiBxB,EAAaR,YAC9BiD,EAAW,CACfH,MAAOtD,IACPI,MAAM,IAAIV,MAAOC,UACjBtC,KAAM6D,EACNgC,KAAMlC,EAAakC,MAEfvB,EAAQgB,KAAKe,UAAUD,GAC7BrB,IAAkBW,QAAQP,EAAKb,OAOzBe,EAAKzD,SAAS0E,YAAY,SAChCjB,EAAGkB,UAAU,WAAW,GAAM,GAC9BlB,EAAGF,IAAMA,EACTE,EAAGG,SAAWlB,EACdjD,OAAOmF,cAAcnB,GAErBpC,QAqGFe,UAAAA,EACA7E,KAxJkB,eAyJlB8E,oBAjBK,eAECwC,EAAYC,UAAUD,UAAUE,qBAClCF,EAAUG,SAAS,YAAcH,EAAUG,SAAS,UAE/CC,IAJW,KAiBpBpE,aAAAA,GC5JIqE,EAAoB,IAAI1C,IA0C9B,MAAe,CACblB,OAzCK,SAAiBC,OAChBC,EAAQ,CACZ2D,KAAM5D,EACNE,iBAAkB,aAEpByD,EAAkBtC,IAAIpB,GAEfA,GAmCPM,MAhCK,SAAgBC,GACrBmD,SAAyBnD,IAgCzBC,UAjBK,SAAoBD,EAAc5B,GACvC4B,EAAaN,iBAAmBtB,GAiBhClB,YA9BK,SAAsB8C,EAAcE,UAClC,IAAIb,SAAQ,SAAAC,UAAW3B,EAAM/B,YAAW,WACxByH,MAAMC,KAAKH,GAE7BI,QAAO,SAAAC,UAAWA,EAAQJ,OAASpD,EAAaoD,QAChDG,QAAO,SAAAC,UAAWA,IAAYxD,KAC9BuD,QAAO,SAAAC,WAAaA,EAAQ9D,oBAC5B+D,SAAQ,SAAAD,UAAWA,EAAQ9D,iBAAiBQ,MAC/CZ,MACC,OAsBHe,UAdK,kBACE,GAcP7E,KAlDkB,WAmDlB8E,oBAXK,kBACE,GAWPxB,aAAAA,GClDI4E,EAAU,CACdC,EACAC,GAGK,SAASC,QAAc5B,yDAAU,MAClCA,EAAQzG,KAAM,IAEK,aAAjByG,EAAQzG,YACHsI,MAIHvH,EAASmH,EAAQK,MAAK,SAAAC,UAAKA,EAAExI,OAASyG,EAAQzG,WAC/Ce,EACA,OAAOA,EADC,MAAM,IAAIxB,yBAAkBkH,EAAQzG,gCAI7CyI,EAAYP,EAAQK,MAAK,SAAAxH,UAAUA,EAAO8D,mBAG3C4D,QACG,IAAIlJ,kCAA2B4G,KAAKe,UAAUgB,EAAQQ,KAAI,SAAAF,UAAKA,EAAExI,kBAElEyI,MC1BIE,wBACEf,OAAMnB,yDAAU,0BACtBmB,KAAOA,OACPnB,QAAUA,OACV1F,OAASsH,EAAajD,KAAKqB,cAC3BmC,QAAS,OAGTC,cAAe,OAOfC,mBAAqB,UAKrBC,mBAAqB,CACxBjI,QAAS,GACTkI,SAAU,SAQPC,uBAAyB,IAAIhE,SAO7BiE,aAAe,QAKfC,iBAAmB,KACxBC,GAAgBhE,mDAGlB,SAAad,MACPc,KAAKwD,aACD,IAAIrJ,MACR,yDAGG8J,GAAMjE,KAAM,UAAWd,+BAGhC,SAAcA,UACL+E,GAAMjE,KAAM,WAAYd,4CAqBxBc,KAAK0D,wBAlBd,SAAelG,OAEP0G,EAAY,CAChB1F,KAFWwB,KAAKrE,OAAOuC,eAGvBV,GAAAA,GAEF2G,GAAsBnE,KAAM,UAAWA,KAAK0D,oBACxClG,GAAoB,mBAAPA,QACVkG,mBAAqBQ,EAC1BE,GAAmBpE,KAAM,UAAWkE,SAG/BR,mBAAqB,qCAS9B,SAAkB9I,EAAM4C,GAMtB4G,GAAmBpE,KAAMpF,EAJP,CAChB4D,KAFWwB,KAAKrE,OAAOuC,eAGvBV,GAAAA,uCAKJ,SAAqB5C,EAAM4C,GAEzB2G,GAAsBnE,KAAMpF,EADhBoF,KAAK2D,mBAAmB/I,GAAMuI,MAAK,SAAAkB,UAAOA,EAAI7G,KAAOA,2BAInE,0BACMwC,KAAKwD,aAGJA,QAAS,MACRc,EAAetE,KAAK+D,iBAAmB/D,KAAK+D,iBAAmBtF,QAAQC,sBAExEgF,mBAAqB,UACrBC,mBAAmBjI,QAAU,GAE3B4I,EAEJC,MAAK,kBAAM9F,QAAQ+F,IAAI/B,MAAMC,KAAK+B,EAAKZ,4BAEvCU,MAAK,kBAAM9F,QAAQ+F,IAAIC,EAAKX,aAAaR,KAAI,SAAA9F,UAAMA,WAEnD+G,MAAK,kBAAME,EAAK9I,OAAOwD,MAAMsF,EAAKC,8BAGvC,kBACS1E,KAAKrE,OAAOf,6BAGrB,kBACSoF,KAAKwD,gBAIhB,SAASS,GAAOU,EAAgB/J,EAAMsE,OAE9BuC,EAAS,CACbjD,KAFWmG,EAAehJ,OAAOuC,eAGjCtD,KAAAA,EACAa,KAAMyD,UAGayF,EAAeZ,iBAAmBY,EAAeZ,iBAAmBtF,QAAQC,WAC7E6F,MAAK,eACjBK,EAAcD,EAAehJ,OAAOW,YACxCqI,EAAeD,OACfjD,UAIFkD,EAAed,uBAAuB5D,IAAI2E,GAC1CA,UAEGL,MAAK,kBAAMI,EAAed,8BAA8Be,MAEpDA,KAIX,SAASZ,GAAiBpB,ON1BCyB,EM2BnBQ,EAAejC,EAAQjH,OAAOgD,OAAOiE,EAAQJ,KAAMI,EAAQvB,UN3BxCgD,EM6BXQ,IN5BiB,mBAAbR,EAAIE,MM6BpB3B,EAAQmB,iBAAmBc,EAC3BA,EAAaN,MAAK,SAAAO,GAChBlC,EAAQ8B,OAASI,MAGnBlC,EAAQ8B,OAASG,EAIrB,SAASE,GAAsBnC,UACzBA,EAAQe,mBAAmBjI,QAAQsJ,OAAS,GAC5CpC,EAAQe,mBAAmBC,SAASoB,OAAS,EAInD,SAASZ,GAAoBxB,EAAShI,EAAMyJ,GAC1CzB,EAAQe,mBAAmB/I,GAAMqK,KAAKZ,GASxC,SAA0BzB,OACnBA,EAAQa,cAAgBsB,GAAqBnC,GAAU,KAGpDsC,EAAa,SAAAzD,GACjBmB,EAAQe,mBAAmBlC,EAAO7G,MAAMiI,SAAQ,SAAAwB,GAC1C5C,EAAOjD,MAAQ6F,EAAI7F,MACrB6F,EAAI7G,GAAGiE,EAAOhG,UAKd+C,EAAOoE,EAAQjH,OAAOuC,eACxB0E,EAAQmB,iBAEVnB,EAAQmB,iBAAiBQ,MAAK,WAC5B3B,EAAQa,cAAe,EACvBb,EAAQjH,OAAO0D,UACbuD,EAAQ8B,OACRQ,EACA1G,OAIJoE,EAAQa,cAAe,EACvBb,EAAQjH,OAAO0D,UACbuD,EAAQ8B,OACRQ,EACA1G,KApCN2G,CAAgBvC,GAGlB,SAASuB,GAAuBvB,EAAShI,EAAMyJ,GAC7CzB,EAAQe,mBAAmB/I,GAAQgI,EAAQe,mBAAmB/I,GAAM+H,QAAO,SAAAyC,UAAKA,IAAMf,KAsCxF,SAAyBzB,MACnBA,EAAQa,eAAiBsB,GAAqBnC,GAAU,CAE1DA,EAAQa,cAAe,MACjBjF,EAAOoE,EAAQjH,OAAOuC,eAC5B0E,EAAQjH,OAAO0D,UACbuD,EAAQ8B,OACR,KACAlG,IA7CJ6G,CAAezC,OC7KX0C,yBACS1C,EAASvB,qCACfkE,SAAW3C,OACX4C,SAAWnE,OAEXoE,UAAW,OACXC,QAAS,OACThE,MAAQtD,SAERuH,aAAc,OACdC,UAAW,OAGXC,WAAa,QACbC,WAAa,QACbC,WAAa,QACbC,oBAAsB,kBACtBC,kBAAmB,OACnBC,uCAAe,4HAEdC,6CAAW,6GAAY1B,EAAK2B,uGAE9BjJ,IACFL,OAAOtB,iBAAiB,eAAgB2K,GACxCrJ,OAAOtB,iBAAiB,SAAU2K,QAE7BN,WAAWZ,KAAK,CAAC,eAAgBkB,SACjCN,WAAWZ,KAAK,CAAC,SAAUkB,sDAIpC,yBACMnG,KAAKyF,SAAU,OAAOhH,QAAQC,SAAQ,MACtCsB,KAAK0F,OAAQ,OAAOjH,QAAQC,SAAQ,MAGpCsB,KAAK2F,wBACFC,UAAW,EACTnH,QAAQC,SAAQ,QAEpBiH,aAAc,MAEfU,GAAe,EAGbC,EAAgB,SAACpH,GACD,WAAhBA,EAAIqH,SAAwBrH,EAAIwC,QAAU8E,EAAK9E,QAG9B,UAAfxC,EAAIuH,QAEFvH,EAAIwC,MAAQ8E,EAAK9E,QAEnB2E,GAAe,GAIA,SAAfnH,EAAIuH,SAENJ,GAAe,iBAIhBd,SAAS/J,iBAAiB,WAAY8K,GAEpCI,GAAa1G,KAAM,SACvBuE,MAAK,kBAAMhG,EAAMiI,EAAKhB,SAASmB,iBAC/BpC,MAAK,kBACA8B,EAAqB5H,QAAQe,OAAO,IAAIrF,OAChCuM,GAAaF,EAAM,YAEhCjC,MAAK,kBAAMhG,EAAMiI,EAAKhB,SAASmB,iBAC/BpC,MAAK,kBACA8B,EAAqB5H,QAAQe,OAAO,IAAIrF,OAChCuM,GAAaF,MAE1BjC,MAAK,kBAoHL,SAAmBqC,GACxBA,EAAcnB,UAAW,MAEnBoB,EAAmB,SAAA3H,GACH,WAAhBA,EAAIqH,SAAuC,UAAfrH,EAAIuH,QAClCC,GAAaE,EAAe,QAGV,WAAhB1H,EAAIqH,SAAuC,SAAfrH,EAAIuH,QAAsBG,EAAcX,mBAOtEW,EAAcX,kBAAmB,EACjCW,EAAcZ,sBACdU,GAAaE,EAAe,iBAGhCA,EAAcrB,SAAS/J,iBAAiB,WAAYqL,GACpDD,EAAcd,WAAWb,KAAK4B,GACvBH,GAAaE,EAAe,QA1InBE,CAASN,MACpBjC,MAAK,kBAAM,YACL,kBAAM,KACZA,MAAK,SAAAwC,UACJP,EAAKjB,SAAS3D,oBAAoB,WAAY0E,GAC9CE,EAAKb,aAAc,GACdoB,GAAWP,EAAKZ,UACnBY,EAAKZ,UAAW,EACTY,EAAKQ,aACAD,oCAIpB,WA2CF,IAA+BH,SAzCxB5G,KAAKiH,+BAEDA,yBAuCoBL,EAvC2B5G,MAwCtCyF,SAAiBhH,QAAQC,UAEpC,IAAID,SAAQ,SAAAC,OACbwI,GAAW,WAENC,IAEHD,IAGJA,GAAW,EACXnK,EAAMV,cAAc+K,GACpBR,EAAcrB,SAAS3D,oBAAoB,WAAYyF,GACvD3I,GAAQ,IAIVkI,EAAcI,YAAYzC,MAAK,WACzBqC,EAAcnB,UAChB0B,WAKEC,EAAWrK,EAAMP,aAAY,WAEjCoK,EAAcI,YAAYzC,MAAK,WACzBqC,EAAcnB,UAChB0B,SAGHP,EAAcpB,SAAS8B,kBAC1BV,EAAcb,WAAWd,KAAKmC,OAGxBC,EAAoB,SAAAnI,GACJ,WAAhBA,EAAIqH,SAAuC,UAAfrH,EAAIuH,QAClCG,EAAcI,YAAYzC,MAAK,WACzBqC,EAAcnB,UAAU0B,QAIlCP,EAAcrB,SAAS/J,iBAAiB,WAAY6L,GACpDT,EAAcd,WAAWb,KAAKoC,OAjFvBrH,KAAKiH,mEASLjH,KAAKgG,yBANd,SAAiBxI,QACVwI,oBAAsBxI,6CAcpBwC,KAAKkG,kBANd,SAAiB1I,QACV0I,aAAe1I,kDAQtB,mGACMwC,KAAK0F,oEACJA,QAAS,WAER1F,KAAKuH,iCACNzB,WAAWjD,SAAQ,SAAAhC,UAAY2G,EAAKjC,SAAS3D,oBAAoB,WAAYf,WAC7EkF,WAAWlD,SAAQ,SAAAuE,UAAYrK,EAAMV,cAAc+K,WACnDvB,WAAWhD,SAAQ,SAAA4E,GAClBtK,GACFL,OAAO8E,oBAAoB6F,EAAI,GAAIA,EAAI,yBAGpCf,GAAa1G,KAAM,8GAuD9B,SAAS0G,GAAcE,EAAeH,OAC9BiB,EAAU,CACdnB,QAAS,SACTE,OAAAA,EACA/E,MAAOkF,EAAclF,cAEhBkF,EAAcrB,SAASoC,aAAaD,GC/LtC,IAAME,GAAa,gBACxBhN,IAAAA,KACAgE,IAAAA,YACA0I,IAAAA,iBACAX,IAAAA,aACAkB,IAAAA,cACAC,IAAAA,UACAC,IAAAA,MACAC,IAAAA,MACAC,IAAAA,MACAC,IAAAA,OAEMtF,EAAU,IAAIW,EAAe3E,EAAa,CAAEhE,KAAAA,IAC5CuN,ED8MD,SAA+BvF,EAASvB,MACzCuB,EAAQwF,qBACJ,IAAIjO,MAAM,qDAGZgO,EAAU,IAAI7C,GAAe1C,EAASvB,UAC5CuB,EAAQkB,aAAamB,+BAAK,6GAAYkD,EAAQ/B,mDAE9CxD,EAAQwF,eAAiBD,EAClBA,ECvNSE,CAAqBzF,EAAS,CAAE0E,iBAAAA,EAAkBX,aAAAA,IAC5D2B,EAAW,GAGjBA,EAASH,EAAQzG,QAAS,MAEtB6G,GAAS,EACTC,GAAU,EAER/C,EAAW,kBAAM8C,GAEvBJ,EAAQM,kBAAkBlE,MAAK,WAC7BgE,GAAS,KAGX3F,EAAQpH,iBAAiB,WAAW,iCAAEZ,OAAMuB,cAClCvB,OACD,WACH0N,EAASnM,IAAM,YAEZ,oBACImM,EAASnM,aAEb,OACHuM,EAAKvM,aAEF,SACHwM,EAAOxM,aAEJ,WACH2L,EAAUc,mBAEP,aACHd,EAAUe,qBAEP,QACHd,GAAM,aAEH,QACHC,GAAM,aAEH,QACHC,GAAM,aAEH,SACHC,GAAO,WAaPQ,EAAO,eAACvM,yDAAKgM,EAAQzG,MACzB4G,EAASnM,IAAM,MACT2M,EAASC,OAAOC,OAAOV,GAAUW,OAAM,SAAAC,UAAKA,MAC7CV,GAAWM,IACdN,GAAU,EACN/C,KACFqC,EAAUc,SACNf,GAAesB,EAAK,aAExBA,EAAK,UAKLR,EAAS,eAACxM,yDAAKgM,EAAQzG,MAC3B4G,EAASnM,IAAM,MACTiN,EAAWL,OAAOC,OAAOV,GAAUe,MAAK,SAAAH,UAAMA,KAChDV,GAAWY,IACbZ,GAAU,EACN/C,KACFqC,EAAUe,WACNhB,GAAesB,EAAK,eAExBA,EAAK,YAMXhB,EAAQmB,sCAAc,oGAAkBnB,EAAQ/B,yFAChD+B,EAAQZ,sCAAc,oGAAkB4B,EAAK,qGAEvCA,6CAAO,WAAMzN,mGAAWkH,EAAQtG,YAAY,CAACZ,EAASyM,EAAQzG,0GAE9DvC,6CAAQ,oGACNgJ,EAAQ/B,6BACRxD,EAAQzD,+GAIhBgK,EAAK,YAEE,CAAEhK,MAAAA,EAAOgK,KAAAA,EAAM1D,SAAAA,EAAUiD,KAAAA,EAAMC,OAAAA,EAAQY,UA5C5B,kBAAMf,GA4CiCgB,WAhDtC,SAAAC,GACjBjB,EAAUiB,ycC5CRC,qDASSC,6CACLA,IAOD9K,MAAQ,CACX6J,MAAM,EACNkB,SAAU,IAAI9L,KACd+L,YAAa,IAAI/L,KACjBgM,SAAU,KACVC,SAAU,EACVC,UAAW,KACXC,MAAO,KACPC,MAAO,QAQJC,IAAM,OAONC,aAAc,IAEdC,aAAe,GAGhBV,EAAMW,SAAW,GAAKX,EAAMY,SAAW,QACnC,IAAIpQ,MAAM,mEAIdwP,EAAMW,SAAW,IACdE,UAAYjN,EAAUoM,EAAMc,SAAUd,EAAMW,UAGxCX,EAAMY,SAAW,IACrBC,UAAY5M,EAAU+L,EAAMc,SAAUd,EAAMY,YAI5CC,UAAYb,EAAMc,SAIrBd,EAAMe,eAAiB,IACpBC,YAAc/M,EAAU6G,EAAKmG,aAAaC,mBAAYlB,EAAMe,kBAE5DC,YAAclG,EAAKmG,aAAaC,mBAIlClB,EAAMmB,eAAgBnB,EAAMoB,kBAC1BlM,MAAM6J,MAAO,KAIfsC,iBAAmBvG,EAAKuG,iBAAiBH,qBACzC9C,MAAQtD,EAAKsD,MAAM8C,qBACnB7C,MAAQvD,EAAKuD,MAAM6C,qBACnB5C,MAAQxD,EAAKwD,MAAM4C,qBACnB3C,OAASzD,EAAKyD,OAAO2C,qBACrB/B,OAASrE,EAAKqE,OAAO+B,qBACrBI,iBAAmBxG,EAAKwG,iBAAiBJ,qBACzCK,eAAiBzG,EAAKyG,eAAeL,qBACrCM,kBAAoB1G,EAAK0G,kBAAkBN,qBAC3CO,gBAAkB3G,EAAK2G,gBAAgBP,qBACvCQ,iBAAmB5G,EAAK4G,iBAAiBR,qBACzCS,mBAAqB7G,EAAK6G,mBAAmBT,wEASpD,iBAC0C7K,KAAK2J,MAArCmB,IAAAA,aAAcC,IAAAA,mBAGjBQ,mBAEDR,IACAD,OACG/C,aAEAyD,iDAIT,SAAoBC,GAEbA,EAAUnB,WAAatK,KAAK2J,MAAMW,UAAatK,KAAK2J,MAAMW,SAAW,GACpEtK,KAAKwK,UAAU7M,QAAQqC,KAAKwK,UAAU7M,cACrC6M,UAAYjN,EAAUyC,KAAK2J,MAAMc,SAAUzK,KAAK2J,MAAMW,WAGxDmB,EAAUlB,WAAavK,KAAK2J,MAAMY,UAAavK,KAAK2J,MAAMY,SAAW,GACpEvK,KAAKwK,UAAU7M,QAAQqC,KAAKwK,UAAU7M,cACrC6M,UAAY5M,EAAUoC,KAAK2J,MAAMc,SAAUzK,KAAK2J,MAAMY,YAI1DkB,EAAUlB,UAAoC,IAAxBvK,KAAK2J,MAAMY,UACjCkB,EAAUnB,UAAoC,IAAxBtK,KAAK2J,MAAMW,YAE9BtK,KAAKwK,UAAU7M,QAAQqC,KAAKwK,UAAU7M,cACrC6M,UAAYxK,KAAK2J,MAAMc,UAI1BgB,EAAUf,iBAAmB1K,KAAK2J,MAAMe,sBACrCgB,qBACAf,YAAc/M,EAAUoC,KAAK4K,aAAaC,KAAK7K,MAAOA,KAAK2J,MAAMe,qBACjEc,eAGHC,EAAUE,UAAY3L,KAAK2J,MAAMgC,SAC/B3L,KAAKnB,MAAM6J,MAAM1I,KAAKgI,QAIxByD,EAAU5C,WAAa7I,KAAK2J,MAAMd,WAAU7I,KAAKqK,aAAaxB,SAAW7I,KAAK2J,MAAMd,UACpF4C,EAAU7C,SAAW5I,KAAK2J,MAAMf,SAAQ5I,KAAKqK,aAAazB,OAAS5I,KAAK2J,MAAMf,4CASpF,WAEE7L,EAAMR,aAAayD,KAAKmK,UACnBuB,eAAc,GAEf1L,KAAKwK,UAAU7M,QAAQqC,KAAKwK,UAAU7M,SAEtCqC,KAAK4L,cACFA,QAAQzM,cAAc0M,QAAQ3P,6BASvC,kBACuB8D,KAAK2J,MAAlBmC,UACW,qCAOrB,iBACyC9L,KAAK2J,MAApCoC,IAAAA,SAAUnD,IAAAA,OAAQC,IAAAA,iBACrBwB,aAAe,CAAEzB,OAAAA,EAAQC,SAAAA,GAG1BkD,EAAU,OAORhD,OAAOiD,OAAO,CAChBpN,YAAa,aACb0I,iBAAkB,IAClBX,aAAc,IACdnF,cAAe,IACfqG,eAAe,IACD,IAAbkE,EAAoB,GAAKA,GAX1BnR,IAAAA,KACAgE,IAAAA,YACA0I,IAAAA,iBACAX,IAAAA,aACAkB,IAAAA,mBASG+D,QAAUhE,GAAW,CACxBhN,KAAAA,EACAgE,YAAAA,EACA0I,iBAAAA,EACAX,aAAAA,EACAkB,cAAAA,EACAC,UAAW9H,KAAKqK,aAChBtC,MAAO/H,KAAK+H,MACZC,MAAOhI,KAAKgI,MACZC,MAAOjI,KAAKiI,MACZC,OAAQlI,KAAKkI,qCASnB,yBAGO/K,SAGyC6C,KAAK2J,MAA3CsC,IAAAA,QAASC,IAAAA,OAAQC,IAAAA,QAASC,IAAAA,QAC7BpM,KAAKoK,cACR8B,EAAOrJ,SAAQ,SAAAnC,GACbuL,EAAQzQ,iBAAiBkF,EAAG8F,EAAKmE,YAAa,CAC5CyB,QAAAA,EACAD,QAAAA,YAGC/B,aAAc,iCAQvB,sBAAeiC,6DAGRlP,SAEyC6C,KAAK2J,MAA3CsC,IAAAA,QAASC,IAAAA,OAAQC,IAAAA,QAASC,IAAAA,SAC9BpM,KAAKoK,aAAeiC,KACtBH,EAAOrJ,SAAQ,SAAAnC,GACbuL,EAAQrK,oBAAoBlB,EAAG8G,EAAKmD,YAAa,CAC/CyB,QAAAA,EACAD,QAAAA,YAGC/B,aAAc,oCASvB,SAAkB1J,mBAIX4L,UAAS,SAACC,SAAe,CAC5B7D,MAAO6D,EAAU7D,KACjBoB,SAAWyC,EAAU7D,KAA4C6D,EAAUzC,UAA7C,IAAIhM,KAAU0O,EAAK7C,MAAMgC,QACvD5B,SAAUwC,EAAU7D,KAAO6D,EAAUxC,WAAa,IAAIjM,KAAUyO,EAAUzC,SAAWyC,EAAUxC,aAC7F,iBACuCyC,EAAK7C,MAAtCd,IAAAA,SAAUD,IAAAA,OAAQ6D,IAAAA,WACTD,EAAK3N,MAAd6J,MAEF+D,IAEF1P,EAAMR,aAAaiQ,EAAKrC,KACxBqC,EAAKrC,IAAM,KAEXqC,EAAKd,iBAGHc,EAAKZ,QAEPY,EAAKZ,QAAQlD,OAEbE,EAAOlI,KAGT8L,EAAKhB,cACDgB,EAAKZ,QAEPY,EAAKZ,QAAQjD,SAEbE,EAASnI,mCAWjB,SAAcA,SAC8BV,KAAKnB,MAAvCmL,IAAAA,UAAWC,IAAAA,MAAOC,IAAAA,MAAOxB,IAAAA,OACD1I,KAAK2J,MAA7BgC,IAAAA,QAASc,IAAAA,mBAGZjC,UAAU9J,IAGXsJ,MAGW,cAAXtJ,EAAE9F,KAAsB,IAGtB8F,EAAEuJ,QAAUA,GAASvJ,EAAEwJ,QAAUA,iBAId,IAAZxJ,EAAEuJ,YAA4C,IAAZvJ,EAAEwJ,gBAM/BlK,KAAKkL,iBAEP,WAMhBnO,EAAMR,aAAayD,KAAKmK,UACnBA,IAAM,SAGLuC,GAA8B,IAAI5O,KAASkC,KAAKmL,qBAGjDzC,IAAS+D,IAAiB/D,GAAQgE,EAA6Bf,SAC7DX,iBAAiBtK,QAKnB4L,SAAS,CACZzC,YAAa,IAAI/L,KACjBmM,MAAOvJ,EAAEuJ,MACTC,MAAOxJ,EAAEwJ,QAKPxB,GACG+D,SAIAtC,IAAMpN,EAAM/B,WAAWgF,KAAKgL,iBAAkBW,0BAQvD,eAAOgB,6DAEL5P,EAAMR,aAAayD,KAAKmK,UACnBA,IAAM,UAGNqB,mBAGAc,SAAS,CACZ5D,MAAM,EACNkB,SAAU,IAAI9L,KACd+L,YAAa,IAAI/L,KACjBkM,UAAW,OAGThK,KAAK4L,eAEFA,QAAQpC,YAAW,IAEnBmD,GAAU3M,KAAK2J,MAAMoC,SAASlE,oBAC5B+D,QAAQzC,KAAK,cAKdwC,EAAY3L,KAAK2J,MAAjBgC,aACHxB,IAAMpN,EAAM/B,WAAWgF,KAAKgL,iBAAkBW,wBAOrD,eAAOgB,0DAEL5P,EAAMR,aAAayD,KAAKmK,UACnBA,IAAM,UAGNqB,cAEDxL,KAAKnB,MAAM6J,OACT1I,KAAK4L,aAEFA,QAAQjD,cAERgB,MAAMd,YAIX7I,KAAK4L,eAEFA,QAAQpC,YAAW,IAEnBmD,GAAU3M,KAAK2J,MAAMoC,SAASlE,oBAC5B+D,QAAQzC,KAAK,eAKjBmD,SAAS,CACZ5D,MAAM,EACNkB,SAAU,IAAI9L,KACd+L,YAAa,IAAI/L,KACjBkM,UAAW,WAIL2B,EAAY3L,KAAK2J,MAAjBgC,aACHxB,IAAMpN,EAAM/B,WAAWgF,KAAKgL,iBAAkBW,wBAOrD,eAAOgB,0DAEG3C,EAAchK,KAAKnB,MAAnBmL,UACU,OAAdA,SAGC0B,gBAGL3O,EAAMR,aAAayD,KAAKmK,UACnBA,IAAM,KAGPnK,KAAK4L,UAEFe,GAAU3M,KAAK2J,MAAMoC,SAASlE,oBAC5B+D,QAAQzC,KAAK,cAKjBmD,SAAS,CACZtC,UAAWhK,KAAKiL,4CAQpB,eAAQ0B,4DAEsB3M,KAAKnB,MAAzBmL,IAAAA,UAAWtB,IAAAA,KACD,OAAdsB,SAGCwB,cAGDxL,KAAK4L,UAEFe,GAAU3M,KAAK2J,MAAMoC,SAASlE,oBAC5B+D,QAAQzC,KAAK,UAMjBT,SAEEyB,IAAMpN,EAAM/B,WAAWgF,KAAKgL,iBAAkBhB,QAE9CsC,SAAS,CAAEtC,UAAW,KAAMH,YAAa,IAAI/L,yCAStD,iBACoCkC,KAAKnB,MAA/BmL,IAAAA,UAAWH,IAAAA,WACX8B,EAAY3L,KAAK2J,MAAjBgC,WAGU,OAAd3B,SACKA,EAAY,EAAI,EAAIA,MAIvB4C,EAAWjB,IAAa,IAAI7N,KAAU+L,UACrC+C,EAAW,EAAI,EAAIA,gCAQ5B,eACUhD,EAAY5J,KAAKnB,MAAjB+K,eACC,IAAI9L,KAAU8L,iCAQzB,kBACuB5J,KAAKnB,MAAlBiL,yCASV,iBACuC9J,KAAKnB,MAAlC6J,IAAAA,KAAMoB,IAAAA,SAAUC,IAAAA,gBACpBrB,GACQ,IAAI5K,KAAUgM,EAAYC,EAE7BA,mCASX,kBACyB/J,KAAKnB,MAApBgL,6CASV,kBACS7J,KAAKkL,iBAAmBlL,KAAKqL,yCAQtC,kBACmBrL,KAAKnB,MAAd6J,6BASV,kBACS1I,KAAK4L,SAAU5L,KAAK4L,QAAQnG,kBA9kBfoH,aCAxB,SAASC,kEAgBL,OAfFnB,QAAAA,aAAU,WACVM,QAAAA,aAAU7O,QACV8O,OAAAA,aAAS5O,QACTsL,OAAAA,aAAS,mBACTC,SAAAA,aAAW,mBACX4B,SAAAA,aAAW,mBACXH,SAAAA,aAAW,QACXC,SAAAA,aAAW,QACXG,eAAAA,aAAiB,UACjBI,aAAAA,oBACAC,cAAAA,oBACA0B,WAAAA,oBACAL,QAAAA,oBACAD,QAAAA,oBACAJ,SAAAA,gBAEM3B,EAAc2C,UAAO,GACrBrE,EAAOqE,UAAO,GACdnD,EAAUmD,UAAQ,IAAIjP,MACtBkM,EAAY+C,SAAO,MACnB9C,EAAQ8C,SAAO,MACf7C,EAAQ6C,SAAO,MACf5C,EAAM4C,SAAO,MACblD,EAAakD,SAAO,MACpBjD,EAAWiD,SAAO,MAClBhD,EAAWgD,SAAO,GAClBC,EAAYD,UAAO,GACnBE,EAAWF,SAAOpB,GAClBC,EAAUmB,SAAO,MAGnBhB,KACe,IAAbA,IAAmBA,EAAW,IAClCA,EAAWhD,OAAOiD,OAAO,CACvBpN,YAAa,aACb0I,iBAAkB,IAClBX,aAAc,IACdnF,cAAe,IACfqG,eAAe,GACdkE,QAICmB,EAAaH,SAAOnE,GACpBuE,GAAeJ,SAAOlE,GACtBuE,GAAeL,SAAOtC,GAE5B4C,aAAU,WACRH,EAAWI,QAAU1E,IACpB,CAACA,IAEJyE,aAAU,WACRF,GAAaG,QAAUzE,IACtB,CAACA,IAEJwE,aAAU,WACRD,GAAaE,QAAU7C,IACtB,CAACA,QAEE8C,GAAuBC,WAAQ,oBAC1BC,EAAc/M,GACrB0M,GAAaE,QAAQ5M,UAInB+M,EAAa9P,QAAQ8P,EAAa9P,SAGlC2M,EAAW,EACN/M,EAAUkQ,EAAcnD,GAGtBC,EAAW,EACb3M,EAAU6P,EAAclD,GAIxBkD,IAER,CAAClD,EAAUD,IAORU,GAAmB,SAAAtK,OACjBgN,GAAYhF,EAAK4E,QACvB5E,EAAK4E,QAAUI,EACXA,GACEjB,IAEF1P,EAAMR,aAAa4N,EAAImD,SACvBnD,EAAImD,QAAU,KAEd5B,MAEF5B,EAASwD,SAAY,IAAIxP,KAAUmP,EAASK,QACxC1B,EAAQ0B,QAEV1B,EAAQ0B,QAAQ5E,OAEhBwE,EAAWI,QAAQ5M,KAGrBqJ,EAASuD,UAAa,IAAIxP,KAAUgM,EAASwD,QAC7C9B,KACII,EAAQ0B,QAEV1B,EAAQ0B,QAAQ3E,SAEhBwE,GAAaG,QAAQ5M,KASrBkK,GAAe,SAAAlK,MAEnB6M,GAAqB7M,IAGjBsJ,EAAUsD,YAIC,cAAX5M,EAAE9F,KAAsB,IAEtB8F,EAAEuJ,QAAUA,GAASvJ,EAAEwJ,QAAUA,iBAId,IAAZxJ,EAAEuJ,YAA4C,IAAZvJ,EAAEwJ,gBAK/BgB,KACF,WAMhBnO,EAAMR,aAAa4N,EAAImD,SACvBnD,EAAImD,QAAU,SAGRZ,GAA8B,IAAI5O,KAASqN,MAI9CzC,EAAK4E,UAAYb,IAChB/D,EAAK4E,SAAWZ,EAA6BO,EAASK,UAExDtC,GAAiBtK,GAKnBmJ,EAAWyD,SAAW,IAAIxP,KAC1BmM,EAAMqD,QAAU5M,EAAEuJ,MAClBC,EAAMoD,QAAU5M,EAAEwJ,MAGbxB,EAAK4E,UACRnD,EAAImD,QAAUvQ,EAAM/B,WAAWgQ,GAAkBiC,EAASK,YAQxD3C,GAAcoC,SAAOnC,IAMrBY,GAAc,WAGbrO,IAGAiN,EAAYkD,UACfpB,EAAOrJ,SAAQ,SAAAnC,GACbuL,EAAQzQ,iBAAiBkF,EAAGiK,GAAY2C,QAAS,CAC/ClB,QAAAA,EACAD,QAAAA,OAGJ/B,EAAYkD,SAAU,KAQpB5B,GAAgB,eAACW,0DAGhBlP,IAEDiN,EAAYkD,SAAWjB,KACzBH,EAAOrJ,SAAQ,SAAAnC,GACbuL,EAAQrK,oBAAoBlB,EAAGiK,GAAY2C,QAAS,CAClDlB,QAAAA,EACAD,QAAAA,OAGJ/B,EAAYkD,SAAU,IASpBrC,GAAmB,cAEG,OAAtBjB,EAAUsD,eACLtD,EAAUsD,QAAU,EAAI,EAAItD,EAAUsD,YAIzCV,EAAWK,EAASK,UAAa,IAAIxP,KAAU+L,EAAWyD,gBACzDV,EAAW,EAAI,EAAIA,GAQtB1B,GAAiB,kBAAQ,IAAIpN,KAAU8L,EAAQ0D,SAO/ClC,GAAkB,kBAAMtB,EAASwD,SAOjCjC,GAAmB,kBACnB3C,EAAK4E,SACG,IAAIxP,KAAUgM,EAASwD,QAAWvD,EAASuD,QAE9CvD,EAASuD,SASdnC,GAAoB,kBAAMtB,EAAWyD,SAOrChC,GAAqB,kBAAMJ,KAAmBG,MAO9CvC,GAAS,kBAAMJ,EAAK4E,SAMpB7H,GAAW,kBAAMmG,EAAQ0B,SAAU1B,EAAQ0B,QAAQ7H,YAMnDsC,GAAQ,eAAC4E,0DAEb5P,EAAMR,aAAa4N,EAAImD,SACvBnD,EAAImD,QAAU,KAGd9B,KAGA9C,EAAK4E,SAAU,EACf1D,EAAQ0D,SAAW,IAAIxP,KACvB+L,EAAWyD,SAAW,IAAIxP,KAC1BkM,EAAUsD,QAAU,KAEhB1B,EAAQ0B,UAEV1B,EAAQ0B,QAAQ9D,YAAW,IAEtBmD,GAAUZ,EAASlE,eACtB+D,EAAQ0B,QAAQnE,KAAK,UAKzBgB,EAAImD,QAAUvQ,EAAM/B,WAAWgQ,GAAkBiC,EAASK,UAOtDtF,GAAQ,eAAC2E,0DAEb5P,EAAMR,aAAa4N,EAAImD,SACvBnD,EAAImD,QAAU,KAGd9B,KAGI9C,EAAK4E,UACH1B,EAAQ0B,QAEV1B,EAAQ0B,QAAQ3E,SAEhBwE,GAAaG,WAKjB5E,EAAK4E,SAAU,EACf1D,EAAQ0D,SAAW,IAAIxP,KACvB+L,EAAWyD,SAAW,IAAIxP,KAC1BkM,EAAUsD,QAAU,KAEhB1B,EAAQ0B,UAEV1B,EAAQ0B,QAAQ9D,YAAW,IAEtBmD,GAAUZ,EAASlE,eACtB+D,EAAQ0B,QAAQnE,KAAK,UAKzBgB,EAAImD,QAAUvQ,EAAM/B,WAAWgQ,GAAkBiC,EAASK,UAOtDrF,GAAQ,eAAC0E,0DAEa,OAAtB3C,EAAUsD,UAGd5B,KAGA3O,EAAMR,aAAa4N,EAAImD,SACvBnD,EAAImD,QAAU,KAGdtD,EAAUsD,QAAUrC,KAEhBW,EAAQ0B,UAELX,GAAUZ,EAASlE,eACtB+D,EAAQ0B,QAAQnE,KAAK,WASrBjB,GAAS,eAACyE,0DAEY,OAAtB3C,EAAUsD,UAGd9B,KAIK9C,EAAK4E,UAERnD,EAAImD,QAAUvQ,EAAM/B,WAAWgQ,GAAkBhB,EAAUsD,SAE3DtD,EAAUsD,QAAU,KACpBzD,EAAWyD,SAAW,IAAIxP,MAGxB8N,EAAQ0B,UAELX,GAAUZ,EAASlE,eACtB+D,EAAQ0B,QAAQnE,KAAK,mBAQ3BkE,aAAU,cAEJ/C,EAAW,GAAKC,EAAW,QACvB,IAAIpQ,MAAM,mEAKd4R,IACFH,EAAQ0B,QAAU1F,GAAW,CAC3BhN,KAAMmR,EAASnR,KACfgE,YAAamN,EAASnN,YACtB0I,iBAAkByE,EAASzE,iBAC3BX,aAAcoF,EAASpF,aACvBkB,cAAekE,EAASlE,cACxBC,UAAW,CACTc,OAAQsE,EAAWI,QACnBzE,SAAUsE,GAAaG,SAEzBvF,MAAAA,GACAC,MAAAA,GACAC,MAAAA,GACAC,OAAAA,MAKA6C,4BACK,uFACLhO,EAAMR,aAAa4N,EAAImD,SACvB5B,IAAc,IACVK,kCAAgBH,EAAQ0B,QAAQnO,oDAIpC2L,EACF/C,KAEAyD,+BAIK,uFACLzO,EAAMR,aAAa4N,EAAImD,SACvB5B,IAAc,GACV6B,GAAqB5P,QAAQ4P,GAAqB5P,UAClDoO,kCAAgBH,EAAQ0B,QAAQnO,sDAErC,IAEHkO,aAAU,eACFM,EAAkBvD,EAAYkD,QAChCK,GAAiBjC,KAEnBf,GAAY2C,QADV5C,EAAiB,EACG9M,EAAUgN,GAAcF,GAExBE,GAEpB+C,GAAiBnC,OACpB,CAACd,IAEJ2C,aAAU,WACRJ,EAASK,QAAU3B,GACdqB,EAAUM,SAAW5E,EAAK4E,SAC7BtF,KAEFgF,EAAUM,SAAU,IACnB,CAAC3B,IAEG,CACL7C,OAAAA,GACArD,SAAAA,GACAsC,MAAAA,GACAE,MAAAA,GACAD,MAAAA,GACAE,OAAAA,GACAkD,gBAAAA,GACAC,iBAAAA,GACAF,kBAAAA,GACAG,mBAAAA,GACAJ,eAAAA,GACAD,iBAAAA,IDiGJvB,GAAUkE,UAAY,CAMpBjC,QAASkC,UAAUC,OAMnB5B,OAAQ2B,UAAUE,QAAQF,UAAUG,QAMpCpF,OAAQiF,UAAUpR,KAMlBoM,SAAUgF,UAAUpR,KAMpBgO,SAAUoD,UAAUpR,KAMpB6N,SAAUuD,UAAUC,OAMpBvD,SAAUsD,UAAUC,OAMpBpD,eAAgBmD,UAAUC,OAM1B7B,QAAS4B,UAAUI,UAAU,CAACJ,UAAUK,OAAQL,UAAU5B,UAM1DnB,aAAc+C,UAAUpE,KAMxBsB,cAAe8C,UAAUpE,KAQzBgD,WAAYoB,UAAUpE,KAMtB0C,QAAS0B,UAAUpE,KAMnB2C,QAASyB,UAAUpE,KAMnBsC,SAAU8B,UAAUI,UAAU,CAC5BJ,UAAUpE,KACVoE,UAAUM,MAAM,CACdvT,KAAMiT,UAAUO,MAAM,CAAC,mBAAoB,eAAgB,aAC3DxP,YAAaiP,UAAUG,OACvB1G,iBAAkBuG,UAAUC,OAC5BnH,aAAckH,UAAUC,OACxBtM,cAAeqM,UAAUC,OACzBjG,cAAegG,UAAUpE,UAU/BC,GAAU2E,aAAe,CACvB1C,QAAS,KACTM,QAAS7O,EACT8O,OAAQ5O,EACRsL,OAAQ,aACRC,SAAU,aACV4B,SAAU,aACVH,SAAU,EACVC,SAAU,EACVG,eAAgB,IAChBI,cAAc,EACdC,eAAe,EACf0B,YAAY,EACZL,SAAS,EACTD,SAAS,EACTJ,UAAU,GCrNZe,GAAac,UAAY,CAMvBjC,QAASkC,UAAUC,OAMnB5B,OAAQ2B,UAAUE,QAAQF,UAAUG,QAMpCpF,OAAQiF,UAAUpR,KAMlBoM,SAAUgF,UAAUpR,KAMpBgO,SAAUoD,UAAUpR,KAMpB6N,SAAUuD,UAAUC,OAMpBvD,SAAUsD,UAAUC,OAMpBpD,eAAgBmD,UAAUC,OAM1B7B,QAAS4B,UAAUI,UAAU,CAACJ,UAAUK,OAAQL,UAAU5B,UAM1DnB,aAAc+C,UAAUpE,KAMxBsB,cAAe8C,UAAUpE,KAQzBgD,WAAYoB,UAAUpE,KAMtB0C,QAAS0B,UAAUpE,KAMnB2C,QAASyB,UAAUpE,KAMnBsC,SAAU8B,UAAUI,UAAU,CAC5BJ,UAAUpE,KACVoE,UAAUM,MAAM,CACdvT,KAAMiT,UAAUO,MAAM,CAAC,mBAAoB,eAAgB,aAC3DxP,YAAaiP,UAAUG,OACvB1G,iBAAkBuG,UAAUC,OAC5BnH,aAAckH,UAAUC,OACxBtM,cAAeqM,UAAUC,OACzBjG,cAAegG,UAAUpE,UAU/BqD,GAAauB,aAAe,CAC1B1C,QAAS,KACTM,QAAS7O,EACT8O,OAAQ5O,EACRsL,OAAQ,aACRC,SAAU,aACV4B,SAAU,aACVH,SAAU,EACVC,SAAU,EACVG,eAAgB,IAChBI,cAAc,EACdC,eAAe,EACf0B,YAAY,EACZL,SAAS,EACTD,SAAS,EACTJ,UAAU"}